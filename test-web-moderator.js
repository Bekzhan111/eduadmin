require('dotenv').config();
const { createClient } = require('@supabase/supabase-js');

async function testWebModerator() {
  console.log('üåê –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞...');
  
  try {
    // –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const adminClient = createClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL,
      process.env.NEXT_PUBLIC_SERVICE_ROLE_KEY
    );
    
    // –°–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const supabase = createClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL,
      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
    );
    
    const testEmail = `test-web-moderator-${Date.now()}@example.com`;
    const testPassword = 'TestPassword123!';
    
    console.log('üìã –®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞');
    
    // –°–æ–∑–¥–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω –∫–ª–∏–µ–Ω—Ç
    const { data: authUser, error: createError } = await adminClient.auth.admin.createUser({
      email: testEmail,
      password: testPassword,
      email_confirm: true
    });
    
    if (createError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', createError.message);
      return;
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    const { error: profileError } = await adminClient
      .from('users')
      .insert({
        id: authUser.user.id,
        email: testEmail,
        display_name: 'Test Web Moderator',
        role: 'moderator'
      });
    
    if (profileError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', profileError.message);
      return;
    }
    
    console.log('‚úÖ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω:', testEmail);
    
    console.log('üìã –®–∞–≥ 2: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞');
    const { data: authData, error: authError } = await supabase.auth.signInWithPassword({
      email: testEmail,
      password: testPassword
    });
    
    if (authError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', authError.message);
      return;
    }
    
    console.log('‚úÖ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
    
    console.log('üìã –®–∞–≥ 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    const { data: userProfile } = await supabase
      .from('users')
      .select('*')
      .eq('id', authData.user.id)
      .single();
    
    console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—É—á–µ–Ω:', userProfile?.role);
    
    console.log('üìã –®–∞–≥ 4: –¢–µ—Å—Ç–∏—Ä—É–µ–º fetchBooksWithCorrectClient');
    
    // JavaScript –≤–µ—Ä—Å–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ (–∫–∞–∫ –≤ –Ω–∞—à–µ–º utils —Ñ–∞–π–ª–µ)
    const createAdminClientLocal = () => {
      return createClient(
        process.env.NEXT_PUBLIC_SUPABASE_URL,
        process.env.NEXT_PUBLIC_SERVICE_ROLE_KEY
      );
    };
    
    const shouldUseAdminClient = (role) => role === 'moderator';
    
    const fetchBooksWithCorrectClient = async (role, userId, fallbackClient) => {
      const useAdmin = shouldUseAdminClient(role);
      const client = useAdmin ? createAdminClientLocal() : fallbackClient;
      
      console.log(`üîë Using ${useAdmin ? 'ADMIN' : 'REGULAR'} client for role: ${role}`);
      
      let query = client
        .from('books')
        .select('*');
      
      if (role === 'moderator') {
        query = query.eq('status', 'Moderation');
        console.log('üë®‚Äçüíº Moderator filter applied: status = Moderation');
      }
      
      return await query.order('created_at', { ascending: false });
    };
    
    const { data: booksData, error: booksError } = await fetchBooksWithCorrectClient(
      userProfile.role,
      userProfile.id,
      supabase
    );
    
    if (booksError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–Ω–∏–≥:', booksError.message);
    } else {
      console.log('‚úÖ –ö–Ω–∏–≥–∏ –ø–æ–ª—É—á–µ–Ω—ã:', booksData?.length || 0);
      console.log('üìä –ö–Ω–∏–≥–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏:');
      booksData?.forEach((book, index) => {
        console.log(`   ${index + 1}. ${book.title} (—Å—Ç–∞—Ç—É—Å: ${book.status})`);
      });
    }
    
    console.log('üìã –®–∞–≥ 5: –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
    await supabase.auth.signOut();
    console.log('‚úÖ –í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω');
    
    console.log('üìã –®–∞–≥ 6: –û—á–∏—Å—Ç–∫–∞ - —É–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    await adminClient.auth.admin.deleteUser(authUser.user.id);
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω');
    
  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error.message);
  }
}

testWebModerator(); 