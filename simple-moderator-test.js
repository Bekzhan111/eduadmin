require('dotenv').config();
const { createClient } = require('@supabase/supabase-js');

async function testModeratorAccess() {
  console.log('üîç –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –∫ –∫–Ω–∏–≥–∞–º...');
  
  try {
    const serviceClient = createClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL,
      process.env.NEXT_PUBLIC_SERVICE_ROLE_KEY
    );
    
    const anonClient = createClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL,
      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
    );
    
    console.log('üìã –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
    
    const { data: moderators, error: modError } = await serviceClient
      .from('users')
      .select('id, email, role')
      .eq('role', 'moderator')
      .limit(1);
    
    if (modError || !moderators || moderators.length === 0) {
      console.log('‚ùå –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω:', modError?.message);
      return;
    }
    
    const moderator = moderators[0];
    console.log('‚úÖ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –Ω–∞–π–¥–µ–Ω:', moderator.email);
    
    console.log('\nüìã –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–∏–≥–∏ —á–µ—Ä–µ–∑ SERVICE_ROLE –∫–ª—é—á');
    
    const { data: serviceBooks, error: serviceBooksError } = await serviceClient
      .from('books')
      .select('id, title, status')
      .eq('status', 'Moderation');
    
    if (serviceBooksError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–Ω–∏–≥ —á–µ—Ä–µ–∑ SERVICE_ROLE:', serviceBooksError.message);
    } else {
      console.log('üìö –ö–Ω–∏–≥ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ (SERVICE_ROLE):', serviceBooks?.length || 0);
    }
    
    console.log('\nüìã –®–∞–≥ 3: –í—Ö–æ–¥ –∫–∞–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä —á–µ—Ä–µ–∑ ANON –∫–ª—é—á');
    
    const { data: authData, error: authError } = await anonClient.auth.signInWithPassword({
      email: moderator.email,
      password: 'TestPassword123'
    });
    
    if (authError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', authError.message);
      return;
    }
    
    console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥');
    
    const { data: session, error: sessionError } = await anonClient.auth.getSession();
    
    if (sessionError || !session.session) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:', sessionError?.message);
      return;
    }
    
    console.log('‚úÖ –°–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', session.session.user.email);
    
    console.log('\nüìã –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–∏–≥–∏ —á–µ—Ä–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ANON –∫–ª—é—á');
    
    const { data: allBooks, error: allBooksError } = await anonClient
      .from('books')
      .select('id, title, status, author_id');
    
    if (allBooksError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∫–Ω–∏–≥:', allBooksError.message);
    } else {
      console.log('üìö –í—Å–µ–≥–æ –∫–Ω–∏–≥ –¥–æ—Å—Ç—É–ø–Ω–æ:', allBooks?.length || 0);
      
      if (allBooks && allBooks.length > 0) {
        const statusCount = {};
        allBooks.forEach(book => {
          statusCount[book.status] = (statusCount[book.status] || 0) + 1;
        });
        console.log('üìä –ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:');
        Object.entries(statusCount).forEach(([status, count]) => {
          console.log(`   - ${status}: ${count} –∫–Ω–∏–≥`);
        });
      }
    }
    
    const { data: moderationBooks, error: modBooksError } = await anonClient
      .from('books')
      .select('id, title, status')
      .eq('status', 'Moderation');
    
    if (modBooksError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–Ω–∏–≥ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏:', modBooksError.message);
    } else {
      console.log('üìù –ö–Ω–∏–≥ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω–æ:', moderationBooks?.length || 0);
      
      if (moderationBooks && moderationBooks.length > 0) {
        console.log('\n‚úÖ –£–°–ü–ï–•! –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –≤–∏–¥–∏—Ç –∫–Ω–∏–≥–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏:');
        moderationBooks.slice(0, 5).forEach((book, index) => {
          console.log(`   ${index + 1}. "${book.title}" (${book.id})`);
        });
      }
    }
    
    console.log('\nüìã –®–∞–≥ 5: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
    
    const serviceCount = serviceBooks?.length || 0;
    const anonCount = moderationBooks?.length || 0;
    
    console.log(`üìä SERVICE_ROLE –≤–∏–¥–∏—Ç: ${serviceCount} –∫–Ω–∏–≥`);
    console.log(`üìä –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ANON –≤–∏–¥–∏—Ç: ${anonCount} –∫–Ω–∏–≥`);
    
    if (serviceCount > 0 && anonCount === 0) {
      console.log('\nüîç –î–ò–ê–ì–ù–û–ó: RLS –ø–æ–ª–∏—Ç–∏–∫–∏ –±–ª–æ–∫–∏—Ä—É—é—Ç –¥–æ—Å—Ç—É–ø –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞');
      
      const { data: userProfile, error: profileError } = await anonClient
        .from('users')
        .select('id, email, role')
        .eq('id', session.session.user.id)
        .single();
      
      if (profileError) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', profileError.message);
      } else {
        console.log('üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userProfile);
      }
      
    } else if (serviceCount > 0 && anonCount > 0) {
      console.log('\n‚úÖ –û–¢–õ–ò–ß–ù–û! RLS –ø–æ–ª–∏—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    }
    
    await anonClient.auth.signOut();
    console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error instanceof Error ? error.message : String(error));
  }
}

testModeratorAccess(); 