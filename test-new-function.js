require('dotenv').config();
const { createClient } = require('@supabase/supabase-js');

// JavaScript –≤–µ—Ä—Å–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function createAdminClient() {
  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
  const serviceRoleKey = process.env.NEXT_PUBLIC_SERVICE_ROLE_KEY;
  
  if (!supabaseUrl || !serviceRoleKey) {
    throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω –∫–ª–∏–µ–Ω—Ç–∞');
  }
  return createClient(supabaseUrl, serviceRoleKey);
}

function shouldUseAdminClient(role) {
  return role === 'moderator';
}

async function fetchBooksWithCorrectClient(role, userId, fallbackClient) {
  const useAdmin = shouldUseAdminClient(role);
  const client = useAdmin ? createAdminClient() : fallbackClient;
  
  if (!client) {
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç Supabase');
  }
  
  console.log(`üîë Using ${useAdmin ? 'ADMIN' : 'REGULAR'} client for role: ${role}`);
  
  let query = client
    .from('books')
    .select(`
      id,
      base_url,
      title,
      description,
      grade_level,
      course,
      category,
      status,
      author_id,
      moderator_id,
      created_at,
      updated_at,
      price,
      cover_image,
      file_size,
      pages_count,
      language,
      isbn,
      publisher,
      publication_date,
      downloads_count
    `);

  // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
  switch (role) {
    case 'author':
      query = query.eq('author_id', userId);
      console.log('‚úçÔ∏è Author filter applied: author_id =', userId);
      break;
    case 'moderator':
      query = query.eq('status', 'Moderation');
      console.log('üë®‚Äçüíº Moderator filter applied: status = Moderation');
      break;
    case 'school':
    case 'teacher':
    case 'student':
      query = query.eq('status', 'Active');
      console.log('üéì User filter applied: status = Active');
      break;
    case 'super_admin':
      console.log('üëë Super admin: no filters applied');
      break;
    default:
      query = query.eq('status', 'Active');
      console.log('üîì Default filter applied: status = Active');
      break;
  }

  console.log('üöÄ Executing query...');
  const result = await query.order('created_at', { ascending: false });
  
  console.log(`üìä Query result: ${result.data?.length || 0} books found${result.error ? ` (Error: ${result.error.message})` : ''}`);
  
  return result;
}

async function testNewFunction() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é fetchBooksWithCorrectClient');
  
  try {
    // –°–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
    const supabase = createClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL,
      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
    );
    
    console.log('\nüìã –¢–µ—Å—Ç 1: –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä (–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ADMIN –∫–ª–∏–µ–Ω—Ç)');
    const moderatorResult = await fetchBooksWithCorrectClient('moderator', 'test-user-id', supabase);
    console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞:', moderatorResult.data?.length || 0, '–∫–Ω–∏–≥');
    if (moderatorResult.error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞:', moderatorResult.error.message);
    }
    
    console.log('\nüìã –¢–µ—Å—Ç 2: –ê–≤—Ç–æ—Ä (–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±—ã—á–Ω—ã–π –∫–ª–∏–µ–Ω—Ç)');
    const authorResult = await fetchBooksWithCorrectClient('author', 'test-user-id', supabase);
    console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∞–≤—Ç–æ—Ä–∞:', authorResult.data?.length || 0, '–∫–Ω–∏–≥');
    if (authorResult.error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∞:', authorResult.error.message);
    }
    
    console.log('\nüìã –¢–µ—Å—Ç 3: –°—É–ø–µ—Ä –∞–¥–º–∏–Ω (–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±—ã—á–Ω—ã–π –∫–ª–∏–µ–Ω—Ç)');
    const adminResult = await fetchBooksWithCorrectClient('super_admin', 'test-user-id', supabase);
    console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∞–¥–º–∏–Ω–∞:', adminResult.data?.length || 0, '–∫–Ω–∏–≥');
    if (adminResult.error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–¥–º–∏–Ω–∞:', adminResult.error.message);
    }
    
  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error.message);
  }
}

testNewFunction(); 