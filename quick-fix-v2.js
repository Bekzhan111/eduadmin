const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.NEXT_PUBLIC_SERVICE_ROLE_KEY
);

console.log('üîß –ë—ã—Å—Ç—Ä–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (v2)\n');

async function quickFixV2() {
  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é —à–∫–æ–ª—É
    console.log('üìç –ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∫–æ–ª...');
    const { data: schools, error: schoolsError } = await supabase
      .from('schools')
      .select('id, name')
      .limit(1);

    if (schoolsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∫–æ–ª:', schoolsError.message);
      return;
    }

    if (!schools || schools.length === 0) {
      console.log('‚ö†Ô∏è –®–∫–æ–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ');
      return;
    }

    const defaultSchool = schools[0];
    console.log(`‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —à–∫–æ–ª—É: ${defaultSchool.name} (${defaultSchool.id})`);

    // 2. –ù–∞—Ö–æ–¥–∏–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –±–µ–∑ —à–∫–æ–ª—ã
    console.log('\nüë• –ü–æ–∏—Å–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –±–µ–∑ —à–∫–æ–ª—ã...');
    const { data: studentsWithoutSchool, error: studentsError } = await supabase
      .from('users')
      .select('id, email, role')
      .eq('role', 'student')
      .is('school_id', null);

    if (studentsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:', studentsError.message);
      return;
    }

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –±–µ–∑ —à–∫–æ–ª—ã: ${studentsWithoutSchool?.length || 0}`);

    // 3. –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∫ —à–∫–æ–ª–µ (–±–µ–∑ updated_at)
    if (studentsWithoutSchool && studentsWithoutSchool.length > 0) {
      console.log('üîó –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∫ —à–∫–æ–ª–µ...');
      
      const { error: updateError } = await supabase
        .from('users')
        .update({ school_id: defaultSchool.id })
        .eq('role', 'student')
        .is('school_id', null);

      if (updateError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:', updateError.message);
      } else {
        console.log(`‚úÖ –ü—Ä–∏–≤—è–∑–∞–Ω–æ ${studentsWithoutSchool.length} —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∫ —à–∫–æ–ª–µ`);
      }
    }

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–∏ –¥–ª—è super_admin
    console.log('\nüóùÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–π –¥–ª—è super_admin...');
    const { data: adminKeys, error: keysError } = await supabase
      .from('registration_keys')
      .select('*')
      .eq('role', 'super_admin')
      .eq('is_active', true);

    if (keysError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–µ–π:', keysError.message);
    } else {
      console.log(`üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π super_admin: ${adminKeys?.length || 0}`);
      
      if (!adminKeys || adminKeys.length === 0) {
        console.log('‚ûï –°–æ–∑–¥–∞–µ–º –∫–ª—é—á–∏ –¥–ª—è super_admin...');
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ super_admin –¥–ª—è created_by
        const { data: superAdmin } = await supabase
          .from('users')
          .select('id')
          .eq('role', 'super_admin')
          .limit(1)
          .single();

        // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á–∏ –±–µ–∑ description –ø–æ–ª—è
        const { error: createKeysError } = await supabase
          .from('registration_keys')
          .insert([
            {
              role: 'super_admin',
              max_uses: 5,
              expires_at: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),
              is_active: true,
              created_by: superAdmin?.id
            }
          ]);

        if (createKeysError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–µ–π:', createKeysError.message);
        } else {
          console.log('‚úÖ –°–æ–∑–¥–∞–Ω—ã –∫–ª—é—á–∏ –¥–ª—è super_admin');
        }
      }
    }

    // 5. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    console.log('\nüìä –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...');
    await finalCheck();

  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

async function finalCheck() {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–æ–ª—è–º
    const { data: userStats } = await supabase
      .from('users')
      .select('role, school_id')
      .order('role');

    const roleStats = {};
    userStats?.forEach(user => {
      if (!roleStats[user.role]) {
        roleStats[user.role] = { total: 0, withSchool: 0 };
      }
      roleStats[user.role].total++;
      if (user.school_id) {
        roleStats[user.role].withSchool++;
      }
    });

    console.log('\nüë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:');
    Object.entries(roleStats).forEach(([role, stats]) => {
      const schoolInfo = ['teacher', 'student'].includes(role) 
        ? ` (${stats.withSchool}/${stats.total} —Å —à–∫–æ–ª–æ–π)`
        : '';
      console.log(`  ${role}: ${stats.total}${schoolInfo}`);
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    const { data: keyStats } = await supabase
      .from('registration_keys')
      .select('role, is_active, uses, max_uses');

    const keysByRole = {};
    keyStats?.forEach(key => {
      if (!keysByRole[key.role]) {
        keysByRole[key.role] = { total: 0, active: 0, available: 0 };
      }
      keysByRole[key.role].total++;
      if (key.is_active) {
        keysByRole[key.role].active++;
        if (key.uses < key.max_uses) {
          keysByRole[key.role].available++;
        }
      }
    });

    console.log('\nüóùÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª—é—á–µ–π:');
    Object.entries(keysByRole).forEach(([role, stats]) => {
      console.log(`  ${role}: ${stats.total} –≤—Å–µ–≥–æ, ${stats.active} –∞–∫—Ç–∏–≤–Ω—ã—Ö, ${stats.available} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö`);
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã
    const problems = [];
    
    if (roleStats.student && roleStats.student.withSchool < roleStats.student.total) {
      problems.push(`‚ùå ${roleStats.student.total - roleStats.student.withSchool} —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –±–µ–∑ —à–∫–æ–ª—ã`);
    }
    
    if (!keysByRole.super_admin || keysByRole.super_admin.available === 0) {
      problems.push('‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª—é—á–µ–π –¥–ª—è super_admin');
    }
    
    if (!roleStats.teacher || roleStats.teacher.total === 0) {
      problems.push('‚ö†Ô∏è –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∏—Ç–µ–ª–µ–π');
    }
    
    if (!roleStats.author || roleStats.author.total === 0) {
      problems.push('‚ö†Ô∏è –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–æ–≤');
    }

    if (problems.length > 0) {
      console.log('\nüö® –í—ã—è–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:');
      problems.forEach(problem => console.log(`  ${problem}`));
    } else {
      console.log('\n‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!');
    }

    console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
quickFixV2(); 