require('dotenv').config();
const { createClient } = require('@supabase/supabase-js');

async function testRLSPolicies() {
  console.log('üîí –¢–µ—Å—Ç–∏—Ä—É–µ–º RLS –ø–æ–ª–∏—Ç–∏–∫–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã books...');
  
  try {
    // –°–æ–∑–¥–∞–µ–º –¥–≤–∞ –∫–ª–∏–µ–Ω—Ç–∞ - –æ–¥–∏–Ω —Å anon –∫–ª—é—á–æ–º, –¥—Ä—É–≥–æ–π —Å service_role
    const anonClient = createClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL,
      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
    );
    
    const serviceClient = createClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL,
      process.env.NEXT_PUBLIC_SERVICE_ROLE_KEY
    );
    
    console.log('üìã –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ —Å ANON –∫–ª—é—á–æ–º');
    const { data: anonBooks, error: anonError } = await anonClient
      .from('books')
      .select('id, title, status, author_id')
      .eq('status', 'Moderation');
    
    if (anonError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å ANON –∫–ª—é—á–æ–º:', anonError.message);
    } else {
      console.log('‚úÖ –° ANON –∫–ª—é—á–æ–º –≤–∏–¥–Ω–æ –∫–Ω–∏–≥:', anonBooks?.length || 0);
    }
    
    console.log('\nüìã –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ —Å SERVICE_ROLE –∫–ª—é—á–æ–º');
    const { data: serviceBooks, error: serviceError } = await serviceClient
      .from('books')
      .select('id, title, status, author_id')
      .eq('status', 'Moderation');
    
    if (serviceError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å SERVICE_ROLE –∫–ª—é—á–æ–º:', serviceError.message);
    } else {
      console.log('‚úÖ –° SERVICE_ROLE –∫–ª—é—á–æ–º –≤–∏–¥–Ω–æ –∫–Ω–∏–≥:', serviceBooks?.length || 0);
    }
    
    console.log('\nüìã –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ RLS —Å—Ç–∞—Ç—É—Å–∞ —Ç–∞–±–ª–∏—Ü—ã books');
    const { data: rlsInfo, error: rlsError } = await serviceClient
      .from('pg_tables')
      .select('*')
      .eq('tablename', 'books')
      .eq('schemaname', 'public');
    
    if (rlsError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞–±–ª–∏—Ü–µ:', rlsError.message);
    } else {
      console.log('üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞–±–ª–∏—Ü–µ books:', rlsInfo);
    }
    
    console.log('\nüìã –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–∏—Ç–∏–∫ RLS');
    const { data: policies, error: policiesError } = await serviceClient
      .rpc('sql', { 
        query: `
          SELECT 
            schemaname, 
            tablename, 
            policyname, 
            permissive, 
            roles, 
            cmd, 
            qual, 
            with_check
          FROM pg_policies 
          WHERE tablename = 'books' AND schemaname = 'public';
        `
      });
    
    if (policiesError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–∏—Ç–∏–∫:', policiesError.message);
    } else {
      console.log('üìä RLS –ø–æ–ª–∏—Ç–∏–∫–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã books:', policies);
    }
    
    console.log('\nüìã –®–∞–≥ 5: –ü–æ–ø—ã—Ç–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–∞–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä');
    
    // –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    const { data: moderators, error: modError } = await serviceClient
      .from('users')
      .select('id, email, role')
      .eq('role', 'moderator')
      .limit(1);
    
    if (modError || !moderators || moderators.length === 0) {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞');
      return;
    }
    
    const moderator = moderators[0];
    console.log('‚úÖ –ù–∞–π–¥–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä:', moderator.email);
    
    // –ü–æ–ø—Ä–æ–±—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ anon –∫–ª–∏–µ–Ω—Ç–µ
    console.log('\nüìã –®–∞–≥ 6: –°–∏–º—É–ª—è—Ü–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞');
    
    // –ü—Ä–æ–±—É–µ–º —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: authBooks, error: authError } = await anonClient
      .rpc('set_current_user_id', { user_id: moderator.id })
      .then(() => anonClient
        .from('books')
        .select('id, title, status, author_id')
        .eq('status', 'Moderation')
      );
    
    if (authError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º:', authError.message);
    } else {
      console.log('‚úÖ –° –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –≤–∏–¥–Ω–æ –∫–Ω–∏–≥:', authBooks?.length || 0);
    }
    
    console.log('\nüéØ –ê–ù–ê–õ–ò–ó:');
    console.log('üìä ANON –∫–ª—é—á –≤–∏–¥–∏—Ç –∫–Ω–∏–≥:', anonBooks?.length || 0);
    console.log('üìä SERVICE_ROLE –∫–ª—é—á –≤–∏–¥–∏—Ç –∫–Ω–∏–≥:', serviceBooks?.length || 0);
    
    if ((serviceBooks?.length || 0) > 0 && (anonBooks?.length || 0) === 0) {
      console.log('üîí –ü–†–û–ë–õ–ï–ú–ê: RLS –ø–æ–ª–∏—Ç–∏–∫–∏ –±–ª–æ–∫–∏—Ä—É—é—Ç –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ ANON –∫–ª—é—á');
      console.log('üí° –†–ï–®–ï–ù–ò–ï: –ù—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å RLS –ø–æ–ª–∏—Ç–∏–∫–∏ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤');
      console.log('üîß –ò–ª–∏ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ');
    } else if ((anonBooks?.length || 0) > 0) {
      console.log('‚úÖ ANON –∫–ª—é—á —Ä–∞–±–æ—Ç–∞–µ—Ç - –ø—Ä–æ–±–ª–µ–º–∞ –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ');
    } else {
      console.log('‚ùì –ù–µ—Ç –∫–Ω–∏–≥ –≤ —Å–∏—Å—Ç–µ–º–µ –∏–ª–∏ –¥—Ä—É–≥–∞—è –ø—Ä–æ–±–ª–µ–º–∞');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error instanceof Error ? error.message : String(error));
  }
}

testRLSPolicies(); 