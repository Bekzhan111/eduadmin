const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

// –†–æ–ª–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
const ROLES = ['super_admin', 'school', 'teacher', 'student', 'author', 'moderator'];

// API –∫–ª—é—á–∏ –∏–∑ .env
const SUPABASE_URL = process.env.NEXT_PUBLIC_SUPABASE_URL;
const ANON_KEY = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;
const SERVICE_ROLE_KEY = process.env.NEXT_PUBLIC_SERVICE_ROLE_KEY;

console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–π —Ä–æ–ª–∏\n');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–π
console.log('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
console.log(`‚úÖ SUPABASE_URL: ${SUPABASE_URL ? '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
console.log(`‚úÖ ANON_KEY: ${ANON_KEY ? '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
console.log(`‚úÖ SERVICE_ROLE_KEY: ${SERVICE_ROLE_KEY ? '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n`);

if (!SUPABASE_URL || !ANON_KEY || !SERVICE_ROLE_KEY) {
  console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  process.exit(1);
}

// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç—ã —Å —Ä–∞–∑–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏
const anonClient = createClient(SUPABASE_URL, ANON_KEY);
const serviceClient = createClient(SUPABASE_URL, SERVICE_ROLE_KEY);

async function checkRolePermissions() {
  console.log('üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–π —Ä–æ–ª–∏:\n');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–∞–º —Å –∞–Ω–æ–Ω–∏–º–Ω—ã–º –∫–ª—é—á–æ–º
  console.log('üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ —Å ANON_KEY:');
  await checkTableAccess(anonClient, 'ANON');

  console.log('\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ —Å SERVICE_ROLE_KEY:');
  await checkTableAccess(serviceClient, 'SERVICE');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Ä–æ–ª–∏
  console.log('\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:');
  await checkDatabaseFunctions();

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Ä–æ–ª–∏
  console.log('\nüóùÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ä–æ–ª—è–º:');
  await checkRegistrationKeys();
}

async function checkTableAccess(client, keyType) {
  const tables = ['users', 'schools', 'registration_keys', 'books'];
  
  for (const table of tables) {
    try {
      const { data, error } = await client
        .from(table)
        .select('*')
        .limit(1);
      
      if (error) {
        console.log(`  ‚ùå ${keyType} - ${table}: ${error.message}`);
      } else {
        console.log(`  ‚úÖ ${keyType} - ${table}: –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω (${data?.length || 0} –∑–∞–ø–∏—Å–µ–π)`);
      }
    } catch (err) {
      console.log(`  ‚ùå ${keyType} - ${table}: ${err.message}`);
    }
  }
}

async function checkDatabaseFunctions() {
  const functions = [
    'get_dashboard_summary',
    'create_registration_key',
    'register_with_key',
    'assign_student_keys_to_teacher'
  ];

  for (const func of functions) {
    try {
      // –ü—Ä–æ–±—É–µ–º –≤—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
      let result;
      
      switch (func) {
        case 'get_dashboard_summary':
          result = await serviceClient.rpc(func, { 
            user_id: '00000000-0000-0000-0000-000000000000' 
          });
          break;
        case 'create_registration_key':
          // –ù–µ –≤—ã–∑—ã–≤–∞–µ–º, —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
          result = { error: null };
          break;
        case 'register_with_key':
          // –ù–µ –≤—ã–∑—ã–≤–∞–µ–º, —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
          result = { error: null };
          break;
        case 'assign_student_keys_to_teacher':
          // –ù–µ –≤—ã–∑—ã–≤–∞–µ–º, —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
          result = { error: null };
          break;
        default:
          result = { error: 'Unknown function' };
      }
      
      if (result.error && !result.error.message?.includes('User not found')) {
        console.log(`  ‚ùå ${func}: ${result.error.message || result.error}`);
      } else {
        console.log(`  ‚úÖ ${func}: –§—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞`);
      }
    } catch (err) {
      console.log(`  ‚ùå ${func}: ${err.message}`);
    }
  }
}

async function checkRegistrationKeys() {
  try {
    const { data: keys, error } = await serviceClient
      .from('registration_keys')
      .select('role, is_active, expires_at, uses, max_uses')
      .order('created_at', { ascending: false });

    if (error) {
      console.log(`  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–µ–π: ${error.message}`);
      return;
    }

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–ª—é—á–∏ –ø–æ —Ä–æ–ª—è–º
    const keysByRole = {};
    ROLES.forEach(role => {
      keysByRole[role] = keys?.filter(key => key.role === role) || [];
    });

    for (const role of ROLES) {
      const roleKeys = keysByRole[role];
      const activeKeys = roleKeys.filter(key => 
        key.is_active && 
        (!key.expires_at || new Date(key.expires_at) > new Date()) &&
        key.uses < key.max_uses
      );
      
      console.log(`  üìù ${role.toUpperCase()}: ${roleKeys.length} –≤—Å–µ–≥–æ, ${activeKeys.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö`);
      
      if (roleKeys.length > 0) {
        const sample = roleKeys[0];
        console.log(`    ‚îî‚îÄ –ü—Ä–∏–º–µ—Ä: –∞–∫—Ç–∏–≤–µ–Ω=${sample.is_active}, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π=${sample.uses}/${sample.max_uses}`);
      }
    }
  } catch (err) {
    console.log(`  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª—é—á–µ–π: ${err.message}`);
  }
}

async function checkUsersByRole() {
  console.log('\nüë• –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–æ–ª—è–º:');
  
  try {
    const { data: users, error } = await serviceClient
      .from('users')
      .select('role, school_id, created_at')
      .order('created_at', { ascending: false });

    if (error) {
      console.log(`  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${error.message}`);
      return;
    }

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–æ–ª—è–º
    const usersByRole = {};
    ROLES.forEach(role => {
      usersByRole[role] = users?.filter(user => user.role === role) || [];
    });

    for (const role of ROLES) {
      const roleUsers = usersByRole[role];
      const withSchool = roleUsers.filter(user => user.school_id).length;
      
      console.log(`  üë§ ${role.toUpperCase()}: ${roleUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
      if (role === 'teacher' || role === 'student') {
        console.log(`    ‚îî‚îÄ –ü—Ä–∏–≤—è–∑–∞–Ω—ã –∫ —à–∫–æ–ª–µ: ${withSchool}/${roleUsers.length}`);
      }
    }
  } catch (err) {
    console.log(`  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${err.message}`);
  }
}

async function checkRLSPolicies() {
  console.log('\nüõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–∏—Ç–∏–∫ Row Level Security:');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–∏—Ç–∏–∫–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã users
    const { data: policies, error } = await serviceClient
      .from('pg_policies')
      .select('tablename, policyname, permissive, roles, cmd, qual')
      .in('tablename', ['users', 'schools', 'registration_keys']);

    if (error) {
      console.log(`  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–∏—Ç–∏–∫: ${error.message}`);
      return;
    }

    const tableGroups = {};
    policies?.forEach(policy => {
      if (!tableGroups[policy.tablename]) {
        tableGroups[policy.tablename] = [];
      }
      tableGroups[policy.tablename].push(policy);
    });

    for (const [table, tablePolicies] of Object.entries(tableGroups)) {
      console.log(`  üìã ${table}: ${tablePolicies.length} –ø–æ–ª–∏—Ç–∏–∫`);
      tablePolicies.forEach(policy => {
        console.log(`    ‚îî‚îÄ ${policy.policyname} (${policy.cmd})`);
      });
    }
  } catch (err) {
    console.log(`  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª–∏—Ç–∏–∫: ${err.message}`);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
async function runAllChecks() {
  try {
    await checkRolePermissions();
    await checkUsersByRole();
    await checkRLSPolicies();
    
    console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    console.log('\nüìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
    console.log('1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã');
    console.log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π –¥–ª—è –Ω—É–∂–Ω—ã—Ö —Ä–æ–ª–µ–π');
    console.log('3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ–ª–∏—Ç–∏–∫–∏ RLS –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
    console.log('4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ —à–∫–æ–ª–∞–º');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≤–µ—Ä–æ–∫:', error);
  }
}

runAllChecks(); 