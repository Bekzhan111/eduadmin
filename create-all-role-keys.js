const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.NEXT_PUBLIC_SERVICE_ROLE_KEY
);

// –í—Å–µ —Ä–æ–ª–∏ –≤ —Å–∏—Å—Ç–µ–º–µ
const ALL_ROLES = ['super_admin', 'school', 'teacher', 'student', 'author', 'moderator'];

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–π –¥–ª—è –∫–∞–∂–¥–æ–π —Ä–æ–ª–∏
const ROLE_KEY_CONFIG = {
  super_admin: { count: 5, maxUses: 3, daysValid: 90 },
  school: { count: 10, maxUses: 5, daysValid: 60 },
  teacher: { count: 50, maxUses: 1, daysValid: 30 },
  student: { count: 200, maxUses: 1, daysValid: 30 },
  author: { count: 20, maxUses: 1, daysValid: 60 },
  moderator: { count: 10, maxUses: 1, daysValid: 90 }
};

console.log('üóùÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–µ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö —Ä–æ–ª–µ–π\n');

async function createKeysForAllRoles() {
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª—é—á–µ–π
    console.log('üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–∏—Ö –∫–ª—é—á–µ–π...');
    await checkCurrentKeys();

    // 2. –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è created_by
    const { data: admin } = await supabase
      .from('users')
      .select('id')
      .in('role', ['super_admin', 'school'])
      .limit(1)
      .single();

    if (!admin) {
      console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–µ–π');
      return;
    }

    console.log(`‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: ${admin.id}`);

    // 3. –°–æ–∑–¥–∞–µ–º –∫–ª—é—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Ä–æ–ª–∏
    for (const role of ALL_ROLES) {
      await createKeysForRole(role, admin.id);
    }

    // 4. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    console.log('\nüìä –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π...');
    await checkCurrentKeys();

    console.log('\n‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª—é—á–µ–π:', error);
  }
}

async function checkCurrentKeys() {
  try {
    const { data: keys, error } = await supabase
      .from('registration_keys')
      .select('role, is_active, uses, max_uses, expires_at')
      .order('role');

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–µ–π:', error.message);
      return;
    }

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ä–æ–ª—è–º
    const keysByRole = {};
    ALL_ROLES.forEach(role => {
      keysByRole[role] = keys?.filter(key => key.role === role) || [];
    });

    console.log('\nüìã –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª—é—á–µ–π:');
    for (const role of ALL_ROLES) {
      const roleKeys = keysByRole[role];
      const activeKeys = roleKeys.filter(key => 
        key.is_active && 
        (!key.expires_at || new Date(key.expires_at) > new Date()) &&
        key.uses < key.max_uses
      );
      
      const status = activeKeys.length > 0 ? '‚úÖ' : '‚ö†Ô∏è';
      console.log(`  ${status} ${role.toUpperCase()}: ${roleKeys.length} –≤—Å–µ–≥–æ, ${activeKeys.length} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö`);
    }
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª—é—á–µ–π:', err.message);
  }
}

async function createKeysForRole(role, createdBy) {
  try {
    console.log(`\nüîë –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–µ–π –¥–ª—è —Ä–æ–ª–∏: ${role.toUpperCase()}`);
    
    const config = ROLE_KEY_CONFIG[role];
    if (!config) {
      console.log(`  ‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ä–æ–ª–∏ ${role} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª—é—á–∏
    const { data: existingKeys } = await supabase
      .from('registration_keys')
      .select('*')
      .eq('role', role)
      .eq('is_active', true);

    const activeKeys = existingKeys?.filter(key => 
      (!key.expires_at || new Date(key.expires_at) > new Date()) &&
      key.uses < key.max_uses
    ) || [];

    console.log(`  üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π: ${activeKeys.length}`);

    if (activeKeys.length >= config.count) {
      console.log(`  ‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–ª—é—á–µ–π –¥–ª—è —Ä–æ–ª–∏ ${role} (${activeKeys.length}/${config.count})`);
      return;
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–ª—é—á–∏
    const keysToCreate = config.count - activeKeys.length;
    console.log(`  ‚ûï –°–æ–∑–¥–∞–µ–º ${keysToCreate} –∫–ª—é—á–µ–π...`);

    const newKeys = [];
    for (let i = 0; i < keysToCreate; i++) {
      newKeys.push({
        key: generateRandomKey(),
        role: role,
        max_uses: config.maxUses,
        expires_at: new Date(Date.now() + config.daysValid * 24 * 60 * 60 * 1000).toISOString(),
        is_active: true,
        created_by: createdBy,
        uses: 0
      });
    }

    const { data, error } = await supabase
      .from('registration_keys')
      .insert(newKeys)
      .select();

    if (error) {
      console.error(`  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–µ–π –¥–ª—è ${role}:`, error.message);
    } else {
      console.log(`  ‚úÖ –°–æ–∑–¥–∞–Ω–æ ${data?.length || 0} –∫–ª—é—á–µ–π –¥–ª—è ${role}`);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π
      if (data && data.length > 0) {
        console.log(`  üìù –ü—Ä–∏–º–µ—Ä—ã –∫–ª—é—á–µ–π:`);
        data.slice(0, 3).forEach((key, index) => {
          console.log(`    ${index + 1}. ${key.key} (–¥–æ ${new Date(key.expires_at).toLocaleDateString()})`);
        });
        if (data.length > 3) {
          console.log(`    ... –∏ –µ—â–µ ${data.length - 3} –∫–ª—é—á–µ–π`);
        }
      }
    }

  } catch (err) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–µ–π –¥–ª—è ${role}:`, err.message);
  }
}

function generateRandomKey() {
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —á–∏—Ç–∞–µ–º—ã–π –∫–ª—é—á –≤ —Ñ–æ—Ä–º–∞—Ç–µ: ROLE-XXXX-XXXX
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
  let result = '';
  for (let i = 0; i < 8; i++) {
    if (i === 4) result += '-';
    result += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return result;
}

async function showKeysSummary() {
  console.log('\nüìã –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ –∫–ª—é—á–∞–º:');
  
  try {
    const { data: keys } = await supabase
      .from('registration_keys')
      .select('role, is_active, uses, max_uses, expires_at, key')
      .order('role');

    const summary = {};
    ALL_ROLES.forEach(role => {
      const roleKeys = keys?.filter(key => key.role === role) || [];
      const activeKeys = roleKeys.filter(key => 
        key.is_active && 
        (!key.expires_at || new Date(key.expires_at) > new Date()) &&
        key.uses < key.max_uses
      );
      
      summary[role] = {
        total: roleKeys.length,
        active: activeKeys.length,
        config: ROLE_KEY_CONFIG[role]
      };
    });

    console.log('\n| –†–æ–ª—å | –í—Å–µ–≥–æ | –ê–∫—Ç–∏–≤–Ω—ã—Ö | –¶–µ–ª—å | –°—Ç–∞—Ç—É—Å |');
    console.log('|------|-------|----------|------|---------|');
    
    for (const role of ALL_ROLES) {
      const s = summary[role];
      const status = s.active >= s.config.count ? '‚úÖ –ì–æ—Ç–æ–≤–æ' : `‚ö†Ô∏è –ù—É–∂–Ω–æ ${s.config.count - s.active}`;
      console.log(`| ${role} | ${s.total} | ${s.active} | ${s.config.count} | ${status} |`);
    }

  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–¥–∫–∏:', err.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–µ–π
async function main() {
  await createKeysForAllRoles();
  await showKeysSummary();
  
  console.log('\nüéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:');
  console.log('1. –ö–ª—é—á–∏ super_admin - –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤');
  console.log('2. –ö–ª—é—á–∏ school - –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —à–∫–æ–ª');
  console.log('3. –ö–ª—é—á–∏ teacher - –¥–ª—è —É—á–∏—Ç–µ–ª–µ–π (–ø—Ä–∏–≤—è–∑—ã–≤–∞—é—Ç—Å—è –∫ —à–∫–æ–ª–µ)');
  console.log('4. –ö–ª—é—á–∏ student - –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ (–ø—Ä–∏–≤—è–∑—ã–≤–∞—é—Ç—Å—è –∫ —à–∫–æ–ª–µ)');
  console.log('5. –ö–ª—é—á–∏ author - –¥–ª—è –∞–≤—Ç–æ—Ä–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞');
  console.log('6. –ö–ª—é—á–∏ moderator - –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ —Å–∏—Å—Ç–µ–º—ã');
  
  console.log('\nüì± –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: http://localhost:3000/register?key=–ö–õ–Æ–ß');
}

main(); 