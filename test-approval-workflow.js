const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

// Create clients
const serviceClient = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.NEXT_PUBLIC_SERVICE_ROLE_KEY
);

async function testCompleteWorkflow() {
  console.log('üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π workflow –æ–¥–æ–±—Ä–µ–Ω–∏—è –∫–Ω–∏–≥...');
  
  try {
    // 1. –ù–∞–π–¥–µ–º –∞–≤—Ç–æ—Ä–∞
    console.log('\nüìã –®–∞–≥ 1: –ü–æ–∏—Å–∫ –∞–≤—Ç–æ—Ä–∞');
    const { data: authors, error: authorsError } = await serviceClient
      .from('users')
      .select('id, email, role')
      .eq('role', 'author')
      .limit(1);
    
    if (authorsError || !authors || authors.length === 0) {
      console.error('‚ùå –ê–≤—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    const author = authors[0];
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –∞–≤—Ç–æ—Ä: ${author.email}`);
    
    // 2. –ù–∞–π–¥–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    console.log('\nüìã –®–∞–≥ 2: –ü–æ–∏—Å–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞');
    const { data: moderators, error: modError } = await serviceClient
      .from('users')
      .select('id, email, role')
      .eq('role', 'moderator')
      .limit(1);
    
    if (modError || !moderators || moderators.length === 0) {
      console.error('‚ùå –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    const moderator = moderators[0];
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä: ${moderator.email}`);
    
    // 3. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–Ω–∏–≥—É
    console.log('\nüìã –®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–Ω–∏–≥–∏');
    const testBook = {
      title: `–¢–µ—Å—Ç workflow ${Date.now()}`,
      description: '–¢–µ—Å—Ç–æ–≤–∞—è –∫–Ω–∏–≥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ workflow –æ–¥–æ–±—Ä–µ–Ω–∏—è',
      grade_level: '7',
      course: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
      category: '–£—á–µ–±–Ω–∏–∫',
      language: '–†—É—Å—Å–∫–∏–π',
      pages_count: 100,
      price: 2500,
      base_url: `test-workflow-${Date.now()}`,
      author_id: author.id,
      status: 'Moderation' // –°—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
    };
    
    const { data: createdBook, error: createError } = await serviceClient
      .from('books')
      .insert(testBook)
      .select()
      .single();
    
    if (createError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–∏–≥–∏:', createError.message);
      return;
    }
    
    console.log(`‚úÖ –ö–Ω–∏–≥–∞ —Å–æ–∑–¥–∞–Ω–∞: "${createdBook.title}" (ID: ${createdBook.id})`);
    console.log(`üìä –°—Ç–∞—Ç—É—Å: ${createdBook.status}`);
    
    // 4. –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–¥–æ–±—Ä–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º
    console.log('\nüìã –®–∞–≥ 4: –û–¥–æ–±—Ä–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º');
    const { data: approvedBook, error: approveError } = await serviceClient
      .from('books')
      .update({ 
        status: 'Approved',
        moderator_id: moderator.id // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º ID –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
      })
      .eq('id', createdBook.id)
      .select()
      .single();
    
    if (approveError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è:', approveError.message);
      return;
    }
    
    console.log(`‚úÖ –ö–Ω–∏–≥–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º!`);
    console.log(`üìä –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: ${approvedBook.status}`);
    console.log(`üë®‚Äçüíº –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä ID: ${approvedBook.moderator_id}`);
    
    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω –≤–∏–¥–∏—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—É—é –∫–Ω–∏–≥—É
    console.log('\nüìã –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –¥–ª—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞');
    const { data: approvedBooks, error: checkError } = await serviceClient
      .from('books')
      .select('id, title, status, moderator_id')
      .eq('status', 'Approved');
    
    if (checkError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:', checkError.message);
      return;
    }
    
    console.log(`‚úÖ –ö–Ω–∏–≥ –≤ —Å—Ç–∞—Ç—É—Å–µ "Approved": ${approvedBooks.length}`);
    
    const ourBook = approvedBooks.find(b => b.id === createdBook.id);
    if (ourBook) {
      console.log(`‚úÖ –ù–∞—à–∞ –∫–Ω–∏–≥–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö!`);
      console.log(`üìö "${ourBook.title}" –≥–æ—Ç–æ–≤–∞ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–æ–º`);
    } else {
      console.log(`‚ùå –ù–∞—à–∞ –∫–Ω–∏–≥–∞ –ù–ï –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö`);
    }
    
    // 6. –ù–∞–π–¥–µ–º —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞ –∏ —Å–∏–º—É–ª–∏—Ä—É–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é
    console.log('\nüìã –®–∞–≥ 6: –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–æ–º');
    const { data: superAdmins, error: adminError } = await serviceClient
      .from('users')
      .select('id, email, role')
      .eq('role', 'super_admin')
      .limit(1);
    
    if (adminError || !superAdmins || superAdmins.length === 0) {
      console.error('‚ùå –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    const superAdmin = superAdmins[0];
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω: ${superAdmin.email}`);
    
    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–∏–≥—É
    const { data: publishedBook, error: publishError } = await serviceClient
      .from('books')
      .update({ status: 'Active' })
      .eq('id', createdBook.id)
      .select()
      .single();
    
    if (publishError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:', publishError.message);
      return;
    }
    
    console.log(`‚úÖ –ö–Ω–∏–≥–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!`);
    console.log(`üìä –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${publishedBook.status}`);
    
    // 7. –ò—Ç–æ–≥–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    console.log('\nüìã –®–∞–≥ 7: –ò—Ç–æ–≥–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ workflow');
    const { data: finalCheck, error: finalError } = await serviceClient
      .from('books')
      .select('id, title, status, author_id, moderator_id, created_at')
      .eq('id', createdBook.id)
      .single();
    
    if (finalError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏:', finalError.message);
      return;
    }
    
    console.log('\nüéâ WORKFLOW –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù!');
    console.log('üìö –†–µ–∑—É–ª—å—Ç–∞—Ç:');
    console.log(`   - –ù–∞–∑–≤–∞–Ω–∏–µ: "${finalCheck.title}"`);
    console.log(`   - –°—Ç–∞—Ç—É—Å: ${finalCheck.status}`);
    console.log(`   - –ê–≤—Ç–æ—Ä ID: ${finalCheck.author_id}`);
    console.log(`   - –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä ID: ${finalCheck.moderator_id}`);
    console.log(`   - –°–æ–∑–¥–∞–Ω–∞: ${new Date(finalCheck.created_at).toLocaleDateString('ru-RU')}`);
    
    // 8. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–∏–≥ –≤ –∫–∞–∂–¥–æ–º —Å—Ç–∞—Ç—É—Å–µ
    console.log('\nüìä –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–Ω–∏–≥:');
    const { data: allBooks } = await serviceClient
      .from('books')
      .select('status');
    
    const stats = {
      'Draft': allBooks.filter(b => b.status === 'Draft').length,
      'Moderation': allBooks.filter(b => b.status === 'Moderation').length,
      'Approved': allBooks.filter(b => b.status === 'Approved').length,
      'Active': allBooks.filter(b => b.status === 'Active').length,
    };
    
    Object.entries(stats).forEach(([status, count]) => {
      console.log(`   - ${status}: ${count} –∫–Ω–∏–≥`);
    });
    
    if (stats.Approved > 0) {
      console.log('\n‚úÖ –û–¢–õ–ò–ß–ù–û! –¢–µ–ø–µ—Ä—å –≤ —Å–∏—Å—Ç–µ–º–µ –µ—Å—Ç—å –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏!');
      console.log('üëë –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω –¥–æ–ª–∂–µ–Ω –∏—Ö –≤–∏–¥–µ—Ç—å –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏');
    }
    
  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testCompleteWorkflow(); 