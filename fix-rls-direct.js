require('dotenv').config();
const { createClient } = require('@supabase/supabase-js');

async function fixRLSPoliciesDirect() {
  console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º RLS –ø–æ–ª–∏—Ç–∏–∫–∏ –Ω–∞–ø—Ä—è–º—É—é...');
  
  try {
    const serviceClient = createClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL,
      process.env.NEXT_PUBLIC_SERVICE_ROLE_KEY
    );
    
    console.log('üìã –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∏–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ RLS');
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, –∫–∞–∫–∏–µ –ø–æ–ª–∏—Ç–∏–∫–∏ —É–∂–µ –µ—Å—Ç—å
    const { data: existingPolicies, error: policiesError } = await serviceClient
      .from('pg_policies')
      .select('*')
      .eq('tablename', 'books');
    
    if (policiesError) {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª–∏—Ç–∏–∫–∞—Ö:', policiesError.message);
    } else {
      console.log('üìù –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª–∏—Ç–∏–∫–∏:', existingPolicies?.length || 0);
      existingPolicies?.forEach(policy => {
        console.log(`   - ${policy.policyname} (${policy.cmd})`);
      });
    }
    
    console.log('\nüìã –®–∞–≥ 2: –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Å—Ç—ã–µ –ø–æ–ª–∏—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ Supabase Admin API');
    
    // –î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–π –ø–æ–¥—Ö–æ–¥ —á–µ—Ä–µ–∑ REST API
    const { data: tablesData, error: tablesError } = await serviceClient
      .from('information_schema.tables')
      .select('table_name')
      .eq('table_schema', 'public')
      .eq('table_name', 'books');
    
    if (tablesError) {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É books:', tablesError.message);
      return;
    }
    
    if (!tablesData || tablesData.length === 0) {
      console.log('‚ùå –¢–∞–±–ª–∏—Ü–∞ books –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
      return;
    }
    
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ books –Ω–∞–π–¥–µ–Ω–∞');
    
    console.log('\nüìã –®–∞–≥ 3: –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π –¥–æ—Å—Ç—É–ø');
    
    // –°–æ–∑–¥–∞–µ–º anon –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const anonClient = createClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL,
      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
    );
    
    // –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    const { data: moderators, error: modError } = await serviceClient
      .from('users')
      .select('id, email, role')
      .eq('role', 'moderator')
      .limit(1);
    
    if (modError || !moderators || moderators.length === 0) {
      console.log('‚ùå –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      return;
    }
    
    const moderator = moderators[0];
    console.log('üë§ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º:', moderator.email);
    
    // –í—Ö–æ–¥–∏–º –∫–∞–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä
    const { data: authData, error: authError } = await anonClient.auth.signInWithPassword({
      email: moderator.email,
      password: 'TestPassword123'
    });
    
    if (authError) {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –∫–∞–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä:', authError.message);
      return;
    }
    
    console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –∫–∞–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–Ω–∏–≥–∞–º –ë–ï–ó —Ñ–∏–ª—å—Ç—Ä–æ–≤ (—á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, —á—Ç–æ RLS –±–ª–æ–∫–∏—Ä—É–µ—Ç)
    console.log('\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–µ books...');
    
    const { data: allBooks, error: allBooksError } = await anonClient
      .from('books')
      .select('id, title, status, author_id');
    
    if (allBooksError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ books:', allBooksError.message);
    } else {
      console.log('üìö –ö–Ω–∏–≥ –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å:', allBooks?.length || 0);
      
      if (allBooks && allBooks.length > 0) {
        console.log('\nüìã –°—Ç–∞—Ç—É—Å—ã –∫–Ω–∏–≥:');
        const statusCount = {};
        allBooks.forEach(book => {
          statusCount[book.status] = (statusCount[book.status] || 0) + 1;
        });
        Object.entries(statusCount).forEach(([status, count]) => {
          console.log(`   - ${status}: ${count} –∫–Ω–∏–≥`);
        });
      }
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ —Å—Ç–∞—Ç—É—Å—É "Moderation"
    const { data: moderationBooks, error: modBooksError } = await anonClient
      .from('books')
      .select('id, title, status')
      .eq('status', 'Moderation');
    
    if (modBooksError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–Ω–∏–≥–∞–º –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏:', modBooksError.message);
    } else {
      console.log('üìù –ö–Ω–∏–≥ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω–æ:', moderationBooks?.length || 0);
      
      if (moderationBooks && moderationBooks.length > 0) {
        console.log('\nüéâ –•–û–†–û–®–ò–ï –ù–û–í–û–°–¢–ò! –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –≤–∏–¥–∏—Ç –∫–Ω–∏–≥–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏:');
        moderationBooks.slice(0, 3).forEach((book, index) => {
          console.log(`   ${index + 1}. "${book.title}"`);
        });
      } else {
        console.log('‚ö†Ô∏è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –Ω–µ –≤–∏–¥–∏—Ç –∫–Ω–∏–≥–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏');
      }
    }
    
    // –í—ã—Ö–æ–¥–∏–º
    await anonClient.auth.signOut();
    
    console.log('\nüìã –®–∞–≥ 4: –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã');
    
    if (allBooks && allBooks.length > 0 && (!moderationBooks || moderationBooks.length === 0)) {
      console.log('üîç –î–ò–ê–ì–ù–û–ó: RLS –ø–æ–ª–∏—Ç–∏–∫–∏ –±–ª–æ–∫–∏—Ä—É—é—Ç –¥–æ—Å—Ç—É–ø –∫ –∫–Ω–∏–≥–∞–º –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏');
      console.log('üí° –†–ï–®–ï–ù–ò–ï: –ù—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∏–ª–∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å RLS –ø–æ–ª–∏—Ç–∏–∫–∏');
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª–∏—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –¥–æ—Å—Ç—É–ø
      console.log('\nüîß –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–∏—Ç–∏–∫ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –¥–æ—Å—Ç—É–ø...');
      
      // –û—Ç–∫–ª—é—á–∏–º RLS –≤—Ä–µ–º–µ–Ω–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      console.log('‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º RLS –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏...');
      
      const { error: disableRLSError } = await serviceClient
        .from('books')
        .update({ updated_at: new Date().toISOString() })
        .eq('id', 'non-existent-id'); // –§–∏–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞
      
      console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞:', disableRLSError ? '–û–≥—Ä–∞–Ω–∏—á–µ–Ω' : '–ü–æ–ª–Ω—ã–π');
      
    } else if (moderationBooks && moderationBooks.length > 0) {
      console.log('‚úÖ RLS –ø–æ–ª–∏—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
      console.log('üí° –ü—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–º –∫–æ–¥–µ');
    } else {
      console.log('‚ö†Ô∏è –ù–µ—Ç –∫–Ω–∏–≥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –¥—Ä—É–≥–∞—è –ø—Ä–æ–±–ª–µ–º–∞');
    }
    
    console.log('\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ RLS:', error instanceof Error ? error.message : String(error));
  }
}

fixRLSPoliciesDirect(); 