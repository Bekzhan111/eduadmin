'use client';

import { useState, useEffect, useCallback } from 'react';
import { useAuth } from '@/contexts/AuthContext';
import { createClient } from '@/utils/supabase';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { SkeletonLoader } from '@/components/ui/skeleton';
import { 
  Filter,
  Plus,
  BookOpen,
  Eye,
  Edit,
  Send,
  Trash2,
  CheckCircle,
  PlayCircle,
  RefreshCw,
  Search,
  X,
  ExternalLink,
  Globe
} from 'lucide-react';
import Link from 'next/link';
import Image from 'next/image';
import { fetchBooksWithCorrectClient } from '@/utils/supabase-admin';
import { useRouter } from 'next/navigation';
import BookViewStatsComponent from '@/components/ui/book-view-stats';

type Book = {
  id: string;
  base_url: string; // Most important column for accessing book content
  title: string;
  description: string;
  grade_level: string;
  course: string;
  category: string;
  status: 'Draft' | 'Moderation' | 'Approved' | 'Active';
  author_id: string;
  author_name?: string;
  moderator_id?: string;
  created_at: string;
  updated_at: string;
  price?: number;
  cover_image?: string;
  file_size?: number;
  pages_count?: number;
  language?: string;
  isbn?: string;
  publisher?: string;
  publication_date?: string;
  schools_purchased: number;
  schools_added: number;
  teachers_added: number;
  students_added: number;
  downloads_count?: number;
};

type RawBookData = {
  id: string;
  base_url: string;
  title: string;
  description: string;
  grade_level: string;
  course: string;
  category: string;
  status: 'Draft' | 'Moderation' | 'Approved' | 'Active';
  author_id: string;
  moderator_id?: string;
  created_at: string;
  updated_at: string;
  price?: number;
  cover_image?: string;
  file_size?: number;
  pages_count?: number;
  language?: string;
  isbn?: string;
  publisher?: string;
  publication_date?: string;
  downloads_count?: number;
};

type BookStats = {
  total_books: number;
  active_books: number;
  draft_books: number;
  moderation_books: number;
  approved_books: number;
};

export default function BooksPage() {
  const { userProfile, isLoading: authLoading } = useAuth();
  const [books, setBooks] = useState<Book[]>([]);
  const [filteredBooks, setFilteredBooks] = useState<Book[]>([]);
  const [bookStats, setBookStats] = useState<BookStats | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<string | null>(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [gradeFilter, setGradeFilter] = useState<string>('all');
  const [courseFilter, setCourseFilter] = useState<string>('all');
  const [statusFilter, setStatusFilter] = useState<string>('all');
  const [categoryFilter, setCategoryFilter] = useState<string>('all');

  // States for adding existing books
  const [showAddExistingModal, setShowAddExistingModal] = useState(false);
  const [existingBooks, setExistingBooks] = useState<Book[]>([]);
  const [existingBooksSearch, setExistingBooksSearch] = useState('');
  const [isLoadingExisting, setIsLoadingExisting] = useState(false);
  const [_existingBooksError, setExistingBooksError] = useState<string | null>(null);

  const router = useRouter();

  // Available filters
  const gradeOptions = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'];
  const courseOptions = ['–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '–§–∏–∑–∏–∫–∞', '–•–∏–º–∏—è', '–ë–∏–æ–ª–æ–≥–∏—è', '–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞', '–ò—Å—Ç–æ—Ä–∏—è', '–ì–µ–æ–≥—Ä–∞—Ñ–∏—è', '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π', '–ö–∞–∑–∞—Ö—Å–∫–∏–π', '–†—É—Å—Å–∫–∏–π'];
  const categoryOptions = ['–£—á–µ–±–Ω–∏–∫', '–†–∞–±–æ—á–∞—è —Ç–µ—Ç—Ä–∞–¥—å', '–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫', '–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ', '–û—Ü–µ–Ω–∫–∞'];
  
  // Status options based on role
  const getStatusOptions = () => {
    switch (userProfile?.role) {
      case 'author':
        return ['–ß–µ—Ä–Ω–æ–≤–∏–∫', '–ú–æ–¥–µ—Ä–∞—Ü–∏—è', '–û–¥–æ–±—Ä–µ–Ω–æ', '–ê–∫—Ç–∏–≤–Ω–∞']; // Authors see ALL their books statuses
      case 'moderator':
        return ['–ú–æ–¥–µ—Ä–∞—Ü–∏—è', '–û–¥–æ–±—Ä–µ–Ω–æ']; // Moderators see books for moderation
      case 'super_admin':
        return ['–ß–µ—Ä–Ω–æ–≤–∏–∫', '–ú–æ–¥–µ—Ä–∞—Ü–∏—è', '–û–¥–æ–±—Ä–µ–Ω–æ', '–ê–∫—Ç–∏–≤–Ω–∞']; // Super admin sees all
      default:
        return ['–ê–∫—Ç–∏–≤–Ω–∞']; // School admin, teachers, students see only active books
    }
  };

  const statusOptions = getStatusOptions();

  // Status translation mapping
  const translateStatus = (status: string): string => {
    switch (status) {
      case 'Draft': return '–ß–µ—Ä–Ω–æ–≤–∏–∫';
      case 'Moderation': return '–ú–æ–¥–µ—Ä–∞—Ü–∏—è';
      case 'Approved': return '–û–¥–æ–±—Ä–µ–Ω–æ';
      case 'Active': return '–ê–∫—Ç–∏–≤–Ω–∞';
      default: return status;
    }
  };

  const fetchBooks = useCallback(async () => {
    setIsLoading(true);
    setError(null);
    
    try {
      const supabase = createClient();
      
      console.log('üîç Fetching books for role:', userProfile?.role, 'User ID:', userProfile?.id);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–Ω–∏–≥ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–æ–º
      const { data: booksData, error: booksError } = await fetchBooksWithCorrectClient(
        userProfile?.role,
        userProfile?.id,
        supabase
      );
      
      if (booksError) {
        console.error('‚ùå Database error:', booksError);
        console.error('üìä Error details:', JSON.stringify(booksError, null, 2));
        
        // Show the actual error to the user instead of falling back to mock data
        setError(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–Ω–∏–≥: ${booksError.message}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.`);
        setBooks([]);
        setFilteredBooks([]);
        setBookStats({
          total_books: 0,
          active_books: 0,
          draft_books: 0,
          moderation_books: 0,
          approved_books: 0,
        });
        return;
      }
      
      console.log('‚úÖ Books fetched successfully:', booksData?.length || 0, 'books');
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–æ–≤ –æ—Ç–¥–µ–ª—å–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
      let authorsData: Array<{ id: string; display_name?: string; email: string }> = [];
      if (booksData && booksData.length > 0) {
        const authorIds = [...new Set(booksData.map((book: RawBookData) => book.author_id).filter(Boolean))];
        if (authorIds.length > 0) {
          console.log('üë• Fetching authors data for', authorIds.length, 'authors');
          const { data: authors, error: authorsError } = await supabase
            .from('users')
            .select('id, display_name, email')
            .in('id', authorIds);
          
          if (!authorsError && authors) {
            authorsData = authors;
            console.log('‚úÖ Authors data fetched:', authorsData.length, 'authors');
          } else {
            console.warn('‚ö†Ô∏è Could not fetch authors data:', authorsError?.message);
          }
        }
      }

      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
      const formattedBooks = (booksData || []).map((book: RawBookData) => {
        const authorData = authorsData.find(author => author.id === book.author_id);
        return {
          id: book.id,
          base_url: book.base_url,
          title: book.title,
          description: book.description,
          grade_level: book.grade_level,
          course: book.course,
          category: book.category,
          status: book.status,
          author_id: book.author_id,
          author_name: authorData?.display_name || authorData?.email || 'Unknown Author',
          created_at: book.created_at,
          updated_at: book.updated_at,
          price: book.price,
          cover_image: book.cover_image,
          schools_purchased: 0,
          schools_added: 0,
          teachers_added: 0,
          students_added: 0,
        };
      });
      
      console.log('üìä Formatted books:', formattedBooks.length);
      console.log('üìä Status breakdown:', {
        draft: formattedBooks.filter((b: Book) => b.status === 'Draft').length,
        moderation: formattedBooks.filter((b: Book) => b.status === 'Moderation').length,
        approved: formattedBooks.filter((b: Book) => b.status === 'Approved').length,
        active: formattedBooks.filter((b: Book) => b.status === 'Active').length,
      });
      
      setBooks(formattedBooks);
      setFilteredBooks(formattedBooks);
      
      // –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const stats: BookStats = {
        total_books: formattedBooks.length,
        active_books: formattedBooks.filter((b: Book) => b.status === 'Active').length,
        draft_books: formattedBooks.filter((b: Book) => b.status === 'Draft').length,
        moderation_books: formattedBooks.filter((b: Book) => b.status === 'Moderation').length,
        approved_books: formattedBooks.filter((b: Book) => b.status === 'Approved').length,
      };
      setBookStats(stats);
      
    } catch (error) {
      console.error('‚ùå Error fetching books:', error);
      const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      setError(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–Ω–∏–≥–∏: ${errorMessage}`);
      setBooks([]);
      setFilteredBooks([]);
      setBookStats({
        total_books: 0,
        active_books: 0,
        draft_books: 0,
        moderation_books: 0,
        approved_books: 0,
      });
    } finally {
      setIsLoading(false);
    }
  }, [userProfile]);

  // Filter books based on search term and filters
  useEffect(() => {
    let filtered = books;
    
    // Apply search filter
    if (searchTerm) {
      filtered = filtered.filter(book => 
        (book.title && book.title.toLowerCase().includes(searchTerm.toLowerCase())) ||
        (book.description && book.description.toLowerCase().includes(searchTerm.toLowerCase())) ||
        (book.author_name && book.author_name.toLowerCase().includes(searchTerm.toLowerCase()))
      );
    }
    
    // Apply grade filter
    if (gradeFilter !== 'all') {
      filtered = filtered.filter(book => book.grade_level === gradeFilter);
    }
    
    // Apply course filter
    if (courseFilter !== 'all') {
      filtered = filtered.filter(book => book.course === courseFilter);
    }
    
    // Apply status filter
    if (statusFilter !== 'all') {
      filtered = filtered.filter(book => book.status === statusFilter);
    }
    
    // Apply category filter
    if (categoryFilter !== 'all') {
      filtered = filtered.filter(book => book.category === categoryFilter);
    }
    
    setFilteredBooks(filtered);
  }, [books, searchTerm, gradeFilter, courseFilter, statusFilter, categoryFilter]);

  useEffect(() => {
    if (!authLoading && userProfile) {
      if (userProfile.role !== 'super_admin' && userProfile.role !== 'author' && userProfile.role !== 'moderator' && userProfile.role !== 'school' && userProfile.role !== 'teacher' && userProfile.role !== 'student') {
        setError('Access denied. Only authorized users can view this page.');
        setIsLoading(false);
        return;
      }
      
      fetchBooks();
    }
  }, [authLoading, userProfile, fetchBooks]);

  const getStatusBadgeColor = (status: string) => {
    switch (status) {
      case 'Active':
      case '–ê–∫—Ç–∏–≤–Ω–∞':
        return 'bg-green-500 text-white';
      case 'Approved':
      case '–û–¥–æ–±—Ä–µ–Ω–æ':
        return 'bg-blue-500 text-white';
      case 'Moderation':
      case '–ú–æ–¥–µ—Ä–∞—Ü–∏—è':
        return 'bg-yellow-500 text-white';
      case 'Draft':
      case '–ß–µ—Ä–Ω–æ–≤–∏–∫':
        return 'bg-gray-500 text-white';
      default:
        return 'bg-gray-500 text-white';
    }
  };

  // Get moderator status info
  const getModeratorStatusInfo = (book: Book) => {
    if (book.moderator_id && book.status === 'Approved') {
      return {
        approved: true,
        moderatorId: book.moderator_id,
        message: '‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º',
        submessage: 'üîÑ –û–∂–∏–¥–∞–µ—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º'
      };
    }
    return null;
  };

  // Get book workflow status for different roles
  const getWorkflowStatus = (book: Book, userRole?: string) => {
    switch (userRole) {
      case 'author':
        if (book.status === 'Moderation') return 'üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é - –æ–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏';
        if (book.status === 'Approved') return '‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º - –æ–∂–∏–¥–∞–µ—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏';
        if (book.status === 'Active') return 'üéâ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ - –¥–æ—Å—Ç—É–ø–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!';
        if (book.status === 'Draft') return 'üìù –ß–µ—Ä–Ω–æ–≤–∏–∫ - –º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é';
        break;
      case 'moderator':
        if (book.status === 'Moderation') return 'üìã –¢—Ä–µ–±—É–µ—Ç –≤–∞—à–µ–≥–æ —Ä–µ—à–µ–Ω–∏—è';
        if (book.status === 'Approved') return '‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ - –ø–µ—Ä–µ–¥–∞–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É';
        break;
      case 'super_admin':
        if (book.status === 'Moderation') return '‚è≥ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ - –æ–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º';
        if (book.status === 'Approved') return 'üìã –ì–æ—Ç–æ–≤–æ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏';
        if (book.status === 'Active') return '‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ –≤—Å–µ–º';
        break;
    }
    return '';
  };

  const handleSendToModeration = async (book: Book) => {
    if (!confirm(`–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É "${book.title}" –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é? –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –µ—ë —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.`)) {
      return;
    }

    try {
      setIsLoading(true);
      const supabase = createClient();
      
      const { error } = await supabase
        .from('books')
        .update({ status: 'Moderation' })
        .eq('id', book.id);

      if (error) {
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é: ${error.message}`);
      }

      // Refresh books list
      await fetchBooks();
      setSuccess('–ö–Ω–∏–≥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é');
    } catch (error) {
      console.error('Error sending book to moderation:', error);
      setError(error instanceof Error ? error.message : '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é');
    } finally {
      setIsLoading(false);
    }
  };

  const handleApproveBook = async (book: Book) => {
    if (!confirm(`–û–¥–æ–±—Ä–∏—Ç—å –∫–Ω–∏–≥—É "${book.title}"?`)) {
      return;
    }

    try {
      setIsLoading(true);
      const supabase = createClient();
      
      const { error } = await supabase
        .from('books')
        .update({ 
          status: 'Approved',
          moderator_id: userProfile?.id // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º ID –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –æ–¥–æ–±—Ä–∏–ª –∫–Ω–∏–≥—É
        })
        .eq('id', book.id);

      if (error) {
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ–¥–æ–±—Ä–∏—Ç—å –∫–Ω–∏–≥—É: ${error.message}`);
      }

      // Refresh books list
      await fetchBooks();
      setSuccess('–ö–Ω–∏–≥–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω—É');
    } catch (error) {
      console.error('Error approving book:', error);
      setError(error instanceof Error ? error.message : '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–¥–æ–±—Ä–∏—Ç—å –∫–Ω–∏–≥—É');
    } finally {
      setIsLoading(false);
    }
  };

  const handleActivateBook = async (book: Book) => {
    if (!confirm(`–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–∏–≥—É "${book.title}"? –û–Ω–∞ —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏.`)) {
      return;
    }

    try {
      setIsLoading(true);
      const supabase = createClient();
      
      const { error } = await supabase
        .from('books')
        .update({ status: 'Active' })
        .eq('id', book.id);

      if (error) {
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–∏–≥—É: ${error.message}`);
      }

      // Refresh books list
      await fetchBooks();
      setSuccess('–ö–Ω–∏–≥–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞');
    } catch (error) {
      console.error('Error activating book:', error);
      setError(error instanceof Error ? error.message : '–ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–∏–≥—É');
    } finally {
      setIsLoading(false);
    }
  };

  const handleAddBookToSchool = async (bookId: string) => {
    if (!userProfile?.school_id) {
      setError('School ID not found. Please contact administrator.');
      return;
    }
    
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç—É –∫–Ω–∏–≥—É –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É —à–∫–æ–ª—ã? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–º–µ–Ω–µ–Ω–æ.')) {
      return;
    }
    
    try {
      const supabase = createClient();
      const { error } = await supabase
        .from('school_books')
        .insert({
          school_id: userProfile.school_id,
          book_id: bookId
        });
      
      if (error) {
        throw new Error(`Failed to add book to school library: ${error.message}`);
      }
      
      setSuccess('–ö–Ω–∏–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É —à–∫–æ–ª—ã —É—Å–ø–µ—à–Ω–æ');
      await fetchBooks();
    } catch (error) {
      console.error('Error adding book to school library:', error);
      setError(error instanceof Error ? error.message : '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É —à–∫–æ–ª—ã');
    }
  };

  const handleAddExistingBook = async (originalBookId: string, originalTitle: string) => {
    if (!userProfile) {
      setError('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      return;
    }

    if (!confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É "${originalTitle}" –≤ –≤–∞—à —Å–ø–∏—Å–æ–∫? –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –∫–æ–ø–∏—è —ç—Ç–æ–π –∫–Ω–∏–≥–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–ß–µ—Ä–Ω–æ–≤–∏–∫".`)) {
      return;
    }

    try {
      const supabase = createClient();
      
      // Get the original book data
      const { data: originalBook, error: fetchError } = await supabase
        .from('books')
        .select('*')
        .eq('id', originalBookId)
        .single();

      if (fetchError || !originalBook) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –∫–Ω–∏–≥—É');
      }

      // Generate a new base_url for the copied book
      const timestamp = Date.now();
      const newBaseUrl = `${originalBook.base_url}-copy-${timestamp}`;
      const newTitle = `${originalBook.title} (–ö–æ–ø–∏—è)`;

      // Create a new book based on the existing one
      const { error: createError } = await supabase
        .from('books')
        .insert({
          title: newTitle,
          description: originalBook.description,
          grade_level: originalBook.grade_level,
          course: originalBook.course,
          category: originalBook.category,
          language: originalBook.language || '–†—É—Å—Å–∫–∏–π',
          pages_count: originalBook.pages_count,
          price: originalBook.price,
          cover_image: originalBook.cover_image,
          base_url: newBaseUrl,
          author_id: userProfile.id, // Set current user as author
          status: 'Draft' // Start as draft for editing
        });

      if (createError) {
        throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ø–∏–∏ –∫–Ω–∏–≥–∏: ${createError.message}`);
      }

      setSuccess(`–ö–Ω–∏–≥–∞ "${newTitle}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫–∞–∫ —á–µ—Ä–Ω–æ–≤–∏–∫! –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –µ–µ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.`);
      setShowAddExistingModal(false);
      await fetchBooks();

    } catch (err) {
      console.error('Error adding existing book:', err);
      setError(err instanceof Error ? err.message : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–Ω–∏–≥–∏');
    }
  };

  const fetchExistingBooks = useCallback(async () => {
    if (!userProfile) return;

    try {
      setIsLoadingExisting(true);
      setExistingBooksError(null);
      const supabase = createClient();

      // Fetch only active books that are not already added to the school
      let query = supabase
        .from('books')
        .select('id, title, author_id, grade_level, course, category, price, cover_image, pages_count, language')
        .eq('status', 'Active');
      
      // Fetch school books to exclude them
      if (userProfile.school_id) {
        const { data: schoolBooks } = await supabase
          .from('school_books')
          .select('book_id')
          .eq('school_id', userProfile.school_id);
        
        const excludedBookIds = schoolBooks?.map(sb => sb.book_id) || [];
        
        if (excludedBookIds.length > 0) {
          query = query.not('id', 'in', `(${excludedBookIds.join(',')})`);
        }
      }

      const { data: booksData, error: booksError } = await query.order('title');

      if (booksError) {
        throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–Ω–∏–≥: ${booksError.message}`);
      }

      // Map the data to match the Book type
      const formattedBooks: Book[] = (booksData || []).map(book => ({
        id: book.id,
        base_url: book.id, // Use ID as base_url for existing books
        title: book.title,
        description: '', // Not fetched for existing books modal
        grade_level: book.grade_level,
        course: book.course,
        category: book.category,
        status: 'Active' as const,
        author_id: book.author_id,
        author_name: '–ê–≤—Ç–æ—Ä', // Not fetched for this modal
        moderator_id: undefined,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
        price: book.price,
        cover_image: book.cover_image,
        pages_count: book.pages_count,
        language: book.language,
        schools_purchased: 0,
        schools_added: 0,
        teachers_added: 0,
        students_added: 0,
        downloads_count: 0,
      }));

      setExistingBooks(formattedBooks);
    } catch (err) {
      console.error('Error fetching existing books:', err);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–Ω–∏–≥–∏');
    } finally {
      setIsLoadingExisting(false);
    }
  }, [userProfile]);

  // Fetch existing books when modal opens
  useEffect(() => {
    if (showAddExistingModal) {
      fetchExistingBooks();
    }
  }, [showAddExistingModal, fetchExistingBooks]);

  // Action functions
  const handleEditBook = (book: Book) => {
    router.push(`/dashboard/books/${book.base_url}/edit`);
  };

  const handleDeleteBook = async (book: Book) => {
    if (!confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–Ω–∏–≥—É "${book.title}"? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.`)) {
      return;
    }

    try {
      setIsLoading(true);
      const supabase = createClient();
      
      const { error } = await supabase
        .from('books')
        .delete()
        .eq('id', book.id);

      if (error) {
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–Ω–∏–≥—É: ${error.message}`);
      }

      // Refresh books list
      await fetchBooks();
      setSuccess('–ö–Ω–∏–≥–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞');
    } catch (error) {
      console.error('Error deleting book:', error);
      setError(error instanceof Error ? error.message : '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–Ω–∏–≥—É');
    } finally {
      setIsLoading(false);
    }
  };

  if (authLoading || isLoading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-gray-600 dark:text-gray-400">Loading books...</p>
        </div>
      </div>
    );
  }

  if (error && !books.length) {
    return (
      <div className="p-6">
        <Card>
          <CardContent className="pt-6">
            <div className="text-center text-red-600">
              <p className="text-lg font-semibold">–û—à–∏–±–∫–∞</p>
              <p>{error}</p>
              <Button onClick={() => window.location.reload()} className="mt-4">
                –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –°—Ç—Ä–∞–Ω–∏—Ü—É
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  if (isLoading) {
    return (
      <div className="p-6 space-y-6">
        {/* Page header skeleton */}
        <div className="flex justify-between items-center">
          <div className="space-y-2">
            <SkeletonLoader type="text" lines={1} className="w-1/3" />
            <SkeletonLoader type="text" lines={1} className="w-1/2" />
          </div>
          <div className="flex items-center space-x-2">
            <SkeletonLoader type="custom" height={32} width={120} />
            <SkeletonLoader type="custom" height={40} width={140} />
          </div>
        </div>
        
        {/* Stats cards skeleton */}
        <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
          <SkeletonLoader type="custom" count={5} height={120} />
        </div>
        
        {/* Filters card skeleton */}
        <div className="space-y-4">
          <div className="space-y-2">
            <SkeletonLoader type="text" lines={1} className="w-1/6" />
          </div>
          <div className="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-5 gap-4">
            <SkeletonLoader type="custom" height={40} width="100%" count={5} />
          </div>
        </div>
        
        {/* Table skeleton */}
        <SkeletonLoader type="table" rows={8} />
      </div>
    );
  }

  return (
    <div className="p-6 space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between mb-6">
        <div>
          <h1 className="text-3xl font-bold text-gray-900 dark:text-white">
            {userProfile?.role === 'author' ? '–ú–æ–∏ –∫–Ω–∏–≥–∏' : '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ö–Ω–∏–≥–∞–º–∏'}
          </h1>
          {userProfile?.role === 'author' && (
            <p className="mt-2 text-gray-600 dark:text-gray-400">
              –£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏–º–∏ –∫–Ω–∏–≥–∞–º–∏, —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ –Ω–æ–≤—ã–µ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –∏—Ö —Å—Ç–∞—Ç—É—Å
            </p>
          )}
        </div>
        <div className="flex items-center space-x-4">
          {userProfile?.role === 'author' && (
            <>
              <Link href="/dashboard/books/create">
                <Button className="bg-blue-600 hover:bg-blue-700">
                  <Plus className="h-4 w-4 mr-2" />
                  –°–æ–∑–¥–∞—Ç—å –∫–Ω–∏–≥—É
                </Button>
              </Link>
              <Button 
                onClick={() => setShowAddExistingModal(true)}
                className="bg-green-600 hover:bg-green-700"
              >
                <BookOpen className="h-4 w-4 mr-2" />
                –î–æ–±–∞–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–Ω–∏–≥—É
              </Button>
            </>
          )}
          <Button variant="outline" onClick={fetchBooks}>
            <RefreshCw className={`h-4 w-4 mr-2 ${isLoading ? 'animate-spin' : ''}`} />
            –û–±–Ω–æ–≤–∏—Ç—å
          </Button>
        </div>
      </div>

      {/* Success/Error Messages */}
      {error && (
        <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded">
          {error}
        </div>
      )}
      
      {success && (
        <div className="bg-green-50 border border-green-200 text-green-700 px-4 py-3 rounded">
          {success}
        </div>
      )}

      {/* Statistics Cards */}
      {bookStats && (
        <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
          <Card>
            <CardContent className="pt-6">
              <div className="flex items-center">
                <BookOpen className="h-8 w-8 text-blue-500" />
                <div className="ml-4">
                  <p className="text-sm font-medium text-gray-600">–í—Å–µ–≥–æ –ö–Ω–∏–≥</p>
                  <p className="text-2xl font-bold">{bookStats.total_books}</p>
                </div>
              </div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="pt-6">
              <div className="flex items-center">
                <Eye className="h-8 w-8 text-green-500" />
                <div className="ml-4">
                  <p className="text-sm font-medium text-gray-600">–ê–∫—Ç–∏–≤–Ω—ã–µ</p>
                  <p className="text-2xl font-bold">{bookStats.active_books}</p>
                </div>
              </div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="pt-6">
              <div className="flex items-center">
                <Edit className="h-8 w-8 text-orange-500" />
                <div className="ml-4">
                  <p className="text-sm font-medium text-gray-600">–ú–æ–¥–µ—Ä–∞—Ü–∏—è</p>
                  <p className="text-2xl font-bold">{bookStats.moderation_books}</p>
                </div>
              </div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="pt-6">
              <div className="flex items-center">
                <Edit className="h-8 w-8 text-gray-500" />
                <div className="ml-4">
                  <p className="text-sm font-medium text-gray-600">–ß–µ—Ä–Ω–æ–≤–∏–∫–∏</p>
                  <p className="text-2xl font-bold">{bookStats.draft_books}</p>
                </div>
              </div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="pt-6">
              <div className="flex items-center">
                <Edit className="h-8 w-8 text-blue-500" />
                <div className="ml-4">
                  <p className="text-sm font-medium text-gray-600">–û–¥–æ–±—Ä–µ–Ω–æ</p>
                  <p className="text-2xl font-bold">{bookStats.approved_books}</p>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      )}

      {/* Filters */}
      <Card>
        <CardHeader>
          <CardTitle className="text-lg flex items-center">
            <Filter className="h-5 w-5 mr-2" />
            –§–∏–ª—å—Ç—Ä—ã –ö–Ω–∏–≥
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-5 gap-4">
            {/* Search */}
            <div className="space-y-2">
              <label className="text-sm font-medium">–ü–æ–∏—Å–∫</label>
              <div className="relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
                <Input
                  placeholder="–ü–æ–∏—Å–∫ –∫–Ω–∏–≥..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="pl-9"
                />
              </div>
            </div>

            {/* Grade Level Filter */}
            <div className="space-y-2">
              <label className="text-sm font-medium">–ö–ª–∞—Å—Å</label>
              <Select value={gradeFilter} onValueChange={setGradeFilter}>
                <SelectTrigger>
                  <SelectValue placeholder="–í—Å–µ –ö–ª–∞—Å—Å—ã" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">–í—Å–µ –ö–ª–∞—Å—Å—ã</SelectItem>
                  {gradeOptions.map(grade => (
                    <SelectItem key={grade} value={grade}>{grade} –ö–ª–∞—Å—Å</SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            {/* Course Filter */}
            <div className="space-y-2">
              <label className="text-sm font-medium">–ü—Ä–µ–¥–º–µ—Ç</label>
              <Select value={courseFilter} onValueChange={setCourseFilter}>
                <SelectTrigger>
                  <SelectValue placeholder="–í—Å–µ –ü—Ä–µ–¥–º–µ—Ç—ã" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">–í—Å–µ –ü—Ä–µ–¥–º–µ—Ç—ã</SelectItem>
                  {courseOptions.map(course => (
                    <SelectItem key={course} value={course}>{course}</SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            {/* Category Filter */}
            <div className="space-y-2">
              <label className="text-sm font-medium">–ö–∞—Ç–µ–≥–æ—Ä–∏—è</label>
              <Select value={categoryFilter} onValueChange={setCategoryFilter}>
                <SelectTrigger>
                  <SelectValue placeholder="–í—Å–µ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">–í—Å–µ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏</SelectItem>
                  {categoryOptions.map(category => (
                    <SelectItem key={category} value={category}>{category}</SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            {/* Status Filter */}
            <div className="space-y-2">
              <label className="text-sm font-medium">–°—Ç–∞—Ç—É—Å</label>
              <Select value={statusFilter} onValueChange={setStatusFilter}>
                <SelectTrigger>
                  <SelectValue placeholder="–í—Å–µ –°—Ç–∞—Ç—É—Å—ã" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">–í—Å–µ –°—Ç–∞—Ç—É—Å—ã</SelectItem>
                  {statusOptions.map(status => (
                    <SelectItem key={status} value={status}>{status}</SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Books Table */}
      <Card>
        <CardHeader>
          <CardTitle>–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –ö–Ω–∏–≥</CardTitle>
          <CardDescription>
            –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–∏–≥–∏ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø–æ–∫—É–ø–æ–∫ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="overflow-x-auto">
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>–ö–Ω–∏–≥–∞</TableHead>
                  <TableHead>–ö–ª–∞—Å—Å</TableHead>
                  <TableHead>–ü—Ä–µ–¥–º–µ—Ç</TableHead>
                  <TableHead>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</TableHead>
                  <TableHead>–°—Ç–∞—Ç—É—Å</TableHead>
                  <TableHead>–ê–≤—Ç–æ—Ä</TableHead>
                  <TableHead>–®–∫–æ–ª—ã</TableHead>
                  <TableHead>–£—á–∏—Ç–µ–ª—è</TableHead>
                  <TableHead>–°—Ç—É–¥–µ–Ω—Ç—ã</TableHead>
                  <TableHead>–¶–µ–Ω–∞</TableHead>
                  <TableHead>–î–µ–π—Å—Ç–≤–∏—è</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {filteredBooks.map((book) => (
                  <TableRow key={book.id}>
                    <TableCell>
                      <div>
                        <Link href={`/book/${book.base_url}`} className="hover:text-blue-600 transition-colors">
                          <div className="font-medium flex items-center gap-2">
                            {book.title}
                            <ExternalLink className="h-3 w-3 opacity-50" />
                          </div>
                        </Link>
                        <div className="text-sm text-gray-500">{book.description}</div>
                      </div>
                    </TableCell>
                    <TableCell>
                      <Badge variant="outline">{book.grade_level} –ö–ª–∞—Å—Å</Badge>
                    </TableCell>
                    <TableCell>{book.course}</TableCell>
                    <TableCell>
                      <Badge variant="secondary">{book.category}</Badge>
                    </TableCell>
                    <TableCell>
                      <div>
                        <Badge className={getStatusBadgeColor(book.status)}>
                          {translateStatus(book.status)}
                        </Badge>
                        {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ */}
                        {userProfile?.role === 'author' && book.author_id === userProfile.id && (
                          <div className="text-xs text-gray-600 mt-1">
                            {getWorkflowStatus(book, 'author')}
                          </div>
                        )}
                        {userProfile?.role === 'moderator' && (
                          <div className="text-xs text-gray-600 mt-1">
                            {getWorkflowStatus(book, 'moderator')}
                          </div>
                        )}
                        {userProfile?.role === 'super_admin' && (
                          <div className="text-xs text-gray-600 mt-1">
                            {getWorkflowStatus(book, 'super_admin')}
                          </div>
                        )}
                        {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–µ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –∫–Ω–∏–≥ */}
                        {getModeratorStatusInfo(book) && (
                          <div className="text-xs text-blue-600 mt-1 font-medium">
                            {getModeratorStatusInfo(book)?.message}
                          </div>
                        )}
                      </div>
                    </TableCell>
                    <TableCell>{book.author_name}</TableCell>
                    <TableCell>
                      <BookViewStatsComponent bookId={book.id} showDetailedStats={false} className="justify-center" />
                    </TableCell>
                    <TableCell>
                      <div className="text-center">
                        <div className="text-sm font-medium">{book.schools_purchased} –∫—É–ø–ª–µ–Ω–æ</div>
                        <div className="text-xs text-gray-500">{book.schools_added} –¥–æ–±–∞–≤–ª–µ–Ω–æ</div>
                      </div>
                    </TableCell>
                    <TableCell>
                      <div className="text-center text-sm">{book.teachers_added}</div>
                    </TableCell>
                    <TableCell>
                      <div className="text-center text-sm">{book.students_added}</div>
                    </TableCell>
                    <TableCell>
                      {book.price ? `‚Ç∏${book.price.toLocaleString()}` : '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ'}
                    </TableCell>
                    <TableCell>
                      <div className="flex gap-2 flex-wrap">
                        {/* –ê–≤—Ç–æ—Ä */}
                        {userProfile?.role === 'author' && book.author_id === userProfile.id && (
                          <>
                            {book.status === 'Draft' && (
                              <div className="flex gap-1">
                                <Button
                                  variant="ghost"
                                  size="sm"
                                  onClick={() => handleEditBook(book)}
                                  title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
                                  className="h-8 w-8 p-0"
                                >
                                  <Edit className="h-4 w-4" />
                                </Button>
                                <Button
                                  variant="ghost"
                                  size="sm"
                                  onClick={() => handleSendToModeration(book)}
                                  title="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é"
                                  className="h-8 w-8 p-0 text-blue-600 hover:text-blue-700"
                                >
                                  <Send className="h-4 w-4" />
                                </Button>
                                <Button
                                  variant="ghost"
                                  size="sm"
                                  onClick={() => handleDeleteBook(book)}
                                  title="–£–¥–∞–ª–∏—Ç—å"
                                  className="h-8 w-8 p-0 text-red-600 hover:text-red-700"
                                >
                                  <Trash2 className="h-4 w-4" />
                                </Button>
                              </div>
                            )}
                            {book.status !== 'Draft' && (
                              <div className="text-xs text-gray-500 italic">
                                {getWorkflowStatus(book, 'author')}
                              </div>
                            )}
                          </>
                        )}

                        {/* –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä */}
                        {userProfile?.role === 'moderator' && (
                          <>
                            {book.status === 'Moderation' && (
                              <div className="flex gap-1">
                                <Button
                                  variant="ghost"
                                  size="sm"
                                  onClick={() => handleApproveBook(book)}
                                  title="–û–¥–æ–±—Ä–∏—Ç—å"
                                  className="h-8 w-8 p-0 text-green-600 hover:text-green-700"
                                >
                                  <CheckCircle className="h-4 w-4" />
                                </Button>
                                <Button
                                  variant="ghost"
                                  size="sm"
                                  onClick={() => handleDeleteBook(book)}
                                  title="–û—Ç–∫–ª–æ–Ω–∏—Ç—å"
                                  className="h-8 w-8 p-0 text-red-600 hover:text-red-700"
                                >
                                  <Trash2 className="h-4 w-4" />
                                </Button>
                              </div>
                            )}
                            {book.status === 'Approved' && (
                              <div className="text-xs text-green-600 font-medium">
                                ‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ –≤–∞–º–∏ - –æ–∂–∏–¥–∞–µ—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
                              </div>
                            )}
                            {book.status === 'Active' && (
                              <div className="text-xs text-blue-600 font-medium">
                                üìö –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
                              </div>
                            )}
                            {book.status === 'Draft' && (
                              <div className="text-xs text-gray-500">
                                üìù –ß–µ—Ä–Ω–æ–≤–∏–∫ - –æ–∂–∏–¥–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
                              </div>
                            )}
                          </>
                        )}

                        {/* –°—É–ø–µ—Ä –∞–¥–º–∏–Ω */}
                        {userProfile?.role === 'super_admin' && (
                          <>
                            {book.status === 'Moderation' && (
                              <div className="flex gap-1">
                                <Button
                                  variant="ghost"
                                  size="sm"
                                  onClick={() => handleApproveBook(book)}
                                  title="–û–¥–æ–±—Ä–∏—Ç—å"
                                  className="h-8 w-8 p-0 text-green-600 hover:text-green-700"
                                >
                                  <CheckCircle className="h-4 w-4" />
                                </Button>
                                <Button
                                  variant="ghost"
                                  size="sm"
                                  onClick={() => handleDeleteBook(book)}
                                  title="–û—Ç–∫–ª–æ–Ω–∏—Ç—å"
                                  className="h-8 w-8 p-0 text-red-600 hover:text-red-700"
                                >
                                  <Trash2 className="h-4 w-4" />
                                </Button>
                              </div>
                            )}
                            {book.status === 'Approved' && (
                              <div className="flex gap-1">
                                <Button
                                  variant="ghost"
                                  size="sm"
                                  onClick={() => handleActivateBook(book)}
                                  title="–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å"
                                  className="h-8 w-8 p-0 text-purple-600 hover:text-purple-700"
                                >
                                  <PlayCircle className="h-4 w-4" />
                                </Button>
                              </div>
                            )}
                            {book.status === 'Active' && (
                              <div className="text-xs text-green-600 font-medium">
                                üìö –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤–∞–º–∏
                              </div>
                            )}
                            {book.status === 'Draft' && (
                              <div className="flex gap-1">
                                <Button
                                  variant="ghost"
                                  size="sm"
                                  onClick={() => handleEditBook(book)}
                                  title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
                                  className="h-8 w-8 p-0"
                                >
                                  <Edit className="h-4 w-4" />
                                </Button>
                                <Button
                                  variant="ghost"
                                  size="sm"
                                  onClick={() => handleDeleteBook(book)}
                                  title="–£–¥–∞–ª–∏—Ç—å"
                                  className="h-8 w-8 p-0 text-red-600 hover:text-red-700"
                                >
                                  <Trash2 className="h-4 w-4" />
                                </Button>
                              </div>
                            )}
                          </>
                        )}

                        {/* –ê–¥–º–∏–Ω —à–∫–æ–ª—ã */}
                        {userProfile?.role === 'school_admin' && book.status === 'Active' && (
                          <>
                            <Button 
                              size="sm" 
                              onClick={() => handleAddBookToSchool(book.id)}
                              className="bg-green-600 hover:bg-green-700"
                            >
                              ‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É
                            </Button>
                          </>
                        )}

                        {/* –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —à–∫–æ–ª—ã */}
                        {(userProfile?.role === 'teacher' || userProfile?.role === 'student') && book.status === 'Active' && (
                          <div className="flex flex-col gap-2">
                            {/* –û—Å–Ω–æ–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ —á—Ç–µ–Ω–∏—è */}
                            <Link href={`/read/${book.base_url}`} target="_blank">
                              <Button
                                size="sm"
                                className="w-full bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white shadow-md hover:shadow-lg transition-all duration-200"
                              >
                                <BookOpen className="h-4 w-4 mr-2" />
                                üìñ –ß–∏—Ç–∞—Ç—å –∫–Ω–∏–≥—É
                              </Button>
                            </Link>
                            
                            {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
                            <div className="flex items-center justify-center">
                              <div className="flex items-center text-xs text-green-600 bg-green-50 px-2 py-1 rounded-full">
                                <span className="w-2 h-2 bg-green-500 rounded-full mr-2 animate-pulse"></span>
                                –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è
                              </div>
                            </div>
                            
                            {/* –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
                            <div className="flex gap-1">
                              <Button
                                variant="outline"
                                size="sm"
                                className="flex-1 text-xs h-7 border-purple-200 text-purple-600 hover:bg-purple-50"
                                onClick={() => {
                                  // –î–æ–±–∞–≤–∏–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ (–º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ)
                                  console.log('Add to favorites:', book.id);
                                }}
                              >
                                ‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
                              </Button>
                              <Button
                                variant="outline"
                                size="sm"
                                className="flex-1 text-xs h-7 border-orange-200 text-orange-600 hover:bg-orange-50"
                                onClick={() => {
                                  // –ü–æ–¥–µ–ª–∏—Ç—å—Å—è (–º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ)
                                  navigator.clipboard.writeText(`${window.location.origin}/read/${book.base_url}`);
                                  alert('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!');
                                }}
                              >
                                üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è
                              </Button>
                            </div>
                          </div>
                        )}

                        {/* –ü—É–±–ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–∏–≥ (–¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ä–æ–ª–µ–π) */}
                        {book.status === 'Active' && userProfile?.role !== 'teacher' && userProfile?.role !== 'student' && (
                          <Link href={`/read/${book.base_url}`} target="_blank">
                            <Button
                              variant="ghost"
                              size="sm"
                              title="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç –∫–Ω–∏–≥–∞ –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞"
                              className="h-8 text-green-600 hover:text-green-700"
                            >
                              <Globe className="h-4 w-4 mr-1" />
                              –ü—É–±–ª–∏—á–Ω–æ
                            </Button>
                          </Link>
                        )}
                      </div>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </div>
          
          {filteredBooks.length === 0 && (
            <div className="text-center py-8 text-gray-500">
              –ö–Ω–∏–≥–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º, –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.
            </div>
          )}
        </CardContent>
      </Card>

      {/* Add Existing Book Modal */}
      {showAddExistingModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-6 border-b">
              <h2 className="text-xl font-semibold">–î–æ–±–∞–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–Ω–∏–≥—É</h2>
              <button
                onClick={() => setShowAddExistingModal(false)}
                className="text-gray-500 hover:text-gray-700"
              >
                <X size={24} />
              </button>
            </div>
            
            <div className="p-6">
              {/* Search Input */}
              <div className="mb-4">
                <div className="relative">
                  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" size={20} />
                  <input
                    type="text"
                    placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –æ–ø–∏—Å–∞–Ω–∏—é –∏–ª–∏ –ø—Ä–µ–¥–º–µ—Ç—É..."
                    value={existingBooksSearch}
                    onChange={(e) => setExistingBooksSearch(e.target.value)}
                    className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  />
                </div>
              </div>

              {/* Books List */}
              <div className="max-h-96 overflow-y-auto">
                {isLoadingExisting ? (
                  <div className="flex items-center justify-center py-8">
                    <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
                    <span className="ml-2">–ó–∞–≥—Ä—É–∑–∫–∞ –∫–Ω–∏–≥...</span>
                  </div>
                ) : existingBooks.length === 0 ? (
                  <div className="text-center py-8 text-gray-500">
                    {existingBooksSearch ? '–ö–Ω–∏–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É' : '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–Ω–∏–≥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è'}
                  </div>
                ) : (
                  <div className="space-y-3">
                    {existingBooks.map((book) => (
                      <div key={book.id} className="border border-gray-200 rounded-lg p-4 hover:border-blue-300 transition-colors">
                        <div className="flex items-start justify-between">
                          <div className="flex-1">
                            <h3 className="font-semibold text-lg mb-2">{book.title}</h3>
                            <p className="text-gray-600 text-sm mb-2 line-clamp-2">{book.description}</p>
                            <div className="flex flex-wrap gap-2 mb-2">
                              <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                                {book.grade_level} –∫–ª–∞—Å—Å
                              </span>
                              <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800">
                                {book.course}
                              </span>
                              <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-purple-100 text-purple-800">
                                {book.category}
                              </span>
                              {book.language && (
                                <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
                                  {book.language}
                                </span>
                              )}
                            </div>
                            <div className="text-sm text-gray-500">
                              <p>–ê–≤—Ç–æ—Ä: {book.author_name}</p>
                              <p>–°—Ç—Ä–∞–Ω–∏—Ü: {book.pages_count || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</p>
                              {book.price && <p>–¶–µ–Ω–∞: {book.price} ‚ÇΩ</p>}
                            </div>
                          </div>
                          <div className="ml-4 flex flex-col items-end">
                            {book.cover_image && (
                              <Image
                                src={book.cover_image}
                                alt={book.title}
                                width={64}
                                height={80}
                                className="w-16 h-20 object-cover rounded mb-2"
                              />
                            )}
                            <Button
                              onClick={() => handleAddExistingBook(book.id, book.title)}
                              className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg font-medium min-w-[100px]"
                            >
                              <Plus className="h-4 w-4 mr-2" />
                              –î–û–ë–ê–í–ò–¢–¨
                            </Button>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </div>
            </div>
            
            <div className="px-6 py-4 border-t bg-gray-50">
              <p className="text-sm text-gray-600">
                <strong>–í–Ω–∏–º–∞–Ω–∏–µ:</strong> –ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–Ω–∏–≥–∏ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –µ–µ –∫–æ–ø–∏—è —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º &ldquo;–ß–µ—Ä–Ω–æ–≤–∏–∫&rdquo;. 
                –í—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–ø–∏—é –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–µ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.
              </p>
            </div>
          </div>
        </div>
      )}
    </div>
  );
} 