import { createClient } from '@supabase/supabase-js';
import type { SupabaseClient } from '@supabase/supabase-js';

// –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const serviceRoleKey = process.env.NEXT_PUBLIC_SERVICE_ROLE_KEY;

if (!supabaseUrl) {
  throw new Error('NEXT_PUBLIC_SUPABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
}

if (!serviceRoleKey) {
  throw new Error('NEXT_PUBLIC_SERVICE_ROLE_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ Supabase —Å –ø—Ä–∞–≤–∞–º–∏ SERVICE_ROLE
 * –í–ù–ò–ú–ê–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –∏–ª–∏ –∫–æ–≥–¥–∞ RLS –±–ª–æ–∫–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø
 */
export function createAdminClient() {
  if (!supabaseUrl || !serviceRoleKey) {
    throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω –∫–ª–∏–µ–Ω—Ç–∞');
  }
  return createClient(supabaseUrl, serviceRoleKey);
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –¥–∞–Ω–Ω–æ–π —Ä–æ–ª–∏
 */
export function shouldUseAdminClient(role?: string): boolean {
  // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ: –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥–º–∏–Ω –∫–ª–∏–µ–Ω—Ç –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
  // —á—Ç–æ–±—ã –æ–±–æ–π—Ç–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å RLS –ø–æ–ª–∏—Ç–∏–∫–∞–º–∏
  return role === 'moderator';
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–Ω–∏–≥ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
 */
export async function fetchBooksWithCorrectClient(
  role?: string,
  userId?: string,
  fallbackClient?: SupabaseClient
) {
  const useAdmin = shouldUseAdminClient(role);
  const client = useAdmin ? createAdminClient() : fallbackClient;
  
  if (!client) {
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç Supabase');
  }
  
  console.log(`üîë Using ${useAdmin ? 'ADMIN' : 'REGULAR'} client for role: ${role}`);
  
  let query = client
    .from('books')
    .select(`
      id,
      base_url,
      title,
      description,
      grade_level,
      course,
      category,
      status,
      author_id,
      moderator_id,
      created_at,
      updated_at,
      price,
      cover_image,
      file_size,
      pages_count,
      language,
      isbn,
      publisher,
      publication_date,
      downloads_count
    `);

  // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
  switch (role) {
    case 'author':
      query = query.eq('author_id', userId);
      console.log('‚úçÔ∏è Author filter applied: author_id =', userId);
      break;
    case 'moderator':
      query = query.eq('status', 'Moderation');
      console.log('üë®‚Äçüíº Moderator filter applied: status = Moderation');
      break;
    case 'school':
    case 'teacher':
    case 'student':
      query = query.eq('status', 'Active');
      console.log('üéì User filter applied: status = Active');
      break;
    case 'super_admin':
      console.log('üëë Super admin: no filters applied');
      break;
    default:
      query = query.eq('status', 'Active');
      console.log('üîì Default filter applied: status = Active');
      break;
  }

  console.log('üöÄ Executing query...');
  const result = await query.order('created_at', { ascending: false });
  
  console.log(`üìä Query result: ${result.data?.length || 0} books found${result.error ? ` (Error: ${result.error.message})` : ''}`);
  
  return result;
} 