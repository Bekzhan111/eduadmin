require('dotenv').config();
const { createClient } = require('@supabase/supabase-js');

async function testAuthenticatedModerator() {
  console.log('üîê –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π...');
  
  try {
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å anon –∫–ª—é—á–æ–º (–∫–∞–∫ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏)
    const supabase = createClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL,
      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
    );
    
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ service_role –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    const serviceClient = createClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL,
      process.env.NEXT_PUBLIC_SERVICE_ROLE_KEY
    );
    
    console.log('üìã –®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞');
    const { data: moderators, error: modError } = await serviceClient
      .from('users')
      .select('id, email, role')
      .eq('role', 'moderator')
      .limit(1);
    
    if (modError || !moderators || moderators.length === 0) {
      console.log('‚ùå –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    const moderator = moderators[0];
    console.log('‚úÖ –ù–∞–π–¥–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä:', moderator.email);
    
    // –¢–µ–ø–µ—Ä—å –ø—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ –∫–∞–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä
    console.log('\nüìã –®–∞–≥ 2: –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –∫–∞–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä');
    
    // –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–º –Ω—É–∂–µ–Ω –ø–∞—Ä–æ–ª—å. –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–∞—Ä–æ–ª—å
    const testPassword = 'TestPassword123'; // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    
    try {
      const { data: authData, error: authError } = await supabase.auth.signInWithPassword({
        email: moderator.email,
        password: testPassword
      });
      
      if (authError) {
        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –∫–∞–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä:', authError.message);
        console.log('üí° –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º...');
        
        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        await createTestModerator(serviceClient, supabase);
        return;
      }
      
      console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –∫–∞–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä:', authData.user.email);
      
      // –¢–µ–ø–µ—Ä—å –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫–∞–∫ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      console.log('\nüìã –®–∞–≥ 3: –ó–∞–ø—Ä–æ—Å –∫–Ω–∏–≥ –∫–∞–∫ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä');
      
      const { data: booksData, error: booksError } = await supabase
        .from('books')
        .select(`
          id,
          title,
          status,
          author_id,
          created_at
        `)
        .eq('status', 'Moderation')
        .order('created_at', { ascending: false });
      
      if (booksError) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–Ω–∏–≥:', booksError.message);
      } else {
        console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∫–Ω–∏–≥:', booksData?.length || 0);
        
        if (booksData && booksData.length > 0) {
          console.log('\nüìö –°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏:');
          booksData.forEach((book, index) => {
            console.log(`   ${index + 1}. "${book.title}" (ID: ${book.id})`);
            console.log(`      –°—Ç–∞—Ç—É—Å: ${book.status}`);
            console.log(`      –ê–≤—Ç–æ—Ä ID: ${book.author_id}`);
            console.log(`      –°–æ–∑–¥–∞–Ω–∞: ${new Date(book.created_at).toLocaleDateString('ru-RU')}`);
            console.log('');
          });
          
          console.log('üéâ –£–°–ü–ï–•! –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –≤–∏–¥–∏—Ç –∫–Ω–∏–≥–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏!');
          console.log('üí° –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
        } else {
          console.log('‚ö†Ô∏è –ù–µ—Ç –∫–Ω–∏–≥ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏');
        }
      }
      
      // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Å–∏—Å—Ç–µ–º—ã
      await supabase.auth.signOut();
      console.log('‚úÖ –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã –≤—ã–ø–æ–ª–Ω–µ–Ω');
      
    } catch (loginError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ:', loginError.message);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error instanceof Error ? error.message : String(error));
  }
}

async function createTestModerator(serviceClient, anonClient) {
  console.log('\nüîß –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º...');
  
  try {
    const testEmail = `test-moderator-auth-${Date.now()}@example.com`;
    const testPassword = 'TestPassword123';
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Auth
    const { data: authUser, error: signUpError } = await serviceClient.auth.admin.createUser({
      email: testEmail,
      password: testPassword,
      email_confirm: true
    });
    
    if (signUpError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Auth:', signUpError.message);
      return;
    }
    
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω –≤ Auth:', testEmail);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É users
    const { error: userError } = await serviceClient
      .from('users')
      .insert({
        id: authUser.user.id,
        email: testEmail,
        role: 'moderator',
        display_name: 'Test Moderator'
      });
    
    if (userError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü—É users:', userError.message);
      return;
    }
    
    console.log('‚úÖ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü—É users');
    
    // –¢–µ–ø–µ—Ä—å –ø—Ä–æ–±—É–µ–º –≤–æ–π—Ç–∏ –∫–∞–∫ –Ω–æ–≤—ã–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä
    console.log('\nüìã –í—Ö–æ–¥ –∫–∞–∫ –Ω–æ–≤—ã–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä...');
    
    const { data: authData, error: authError } = await anonClient.auth.signInWithPassword({
      email: testEmail,
      password: testPassword
    });
    
    if (authError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', authError.message);
      return;
    }
    
    console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –∫–∞–∫ –Ω–æ–≤—ã–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–Ω–∏–≥–∞–º
    const { data: booksData, error: booksError } = await anonClient
      .from('books')
      .select('id, title, status, author_id, created_at')
      .eq('status', 'Moderation')
      .order('created_at', { ascending: false });
    
    if (booksError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–Ω–∏–≥ –Ω–æ–≤—ã–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º:', booksError.message);
    } else {
      console.log('‚úÖ –ù–æ–≤—ã–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –≤–∏–¥–∏—Ç –∫–Ω–∏–≥:', booksData?.length || 0);
      
      if (booksData && booksData.length > 0) {
        console.log('üéâ –ü–†–û–ë–õ–ï–ú–ê –†–ï–®–ï–ù–ê! –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –≤–∏–¥–∏—Ç –∫–Ω–∏–≥–∏!');
        console.log('üí° –ü—Ä–æ–±–ª–µ–º–∞ –±—ã–ª–∞ –≤ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ç–µ—Å—Ç–∞—Ö');
        
        console.log('\nüìö –ü–µ—Ä–≤—ã–µ 3 –∫–Ω–∏–≥–∏:');
        booksData.slice(0, 3).forEach((book, index) => {
          console.log(`   ${index + 1}. "${book.title}"`);
        });
      }
    }
    
    // –í—ã—Ö–æ–¥–∏–º
    await anonClient.auth.signOut();
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞:', error.message);
  }
}

testAuthenticatedModerator(); 