const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.NEXT_PUBLIC_SERVICE_ROLE_KEY
);

async function createUpdateFunction() {
  console.log('üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è dashboard summary\n');
  
  try {
    // –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Å—Ç—É—é —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ä–æ–ª—å
    const { data, error } = await supabase.rpc('create_or_replace_function', {
      function_name: 'get_dashboard_summary_fixed',
      function_body: `
        CREATE OR REPLACE FUNCTION public.get_dashboard_summary_fixed(user_id UUID)
        RETURNS JSON AS $$
        DECLARE
            user_record RECORD;
            result JSON;
        BEGIN
            -- –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            SELECT u.role, u.school_id, s.name as school_name
            INTO user_record
            FROM users u
            LEFT JOIN schools s ON u.school_id = s.id
            WHERE u.id = user_id;

            -- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
            IF user_record IS NULL THEN
                RETURN json_build_object('error', 'User not found');
            END IF;

            -- –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ä–æ–ª—å
            result := json_build_object(
                'role', user_record.role,
                'school_id', user_record.school_id,
                'school_name', user_record.school_name
            );

            RETURN result;
        END;
        $$ LANGUAGE plpgsql SECURITY DEFINER;
      `
    });

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏:', error.message);
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥ - –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏–º —Ç–µ–∫—É—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
      console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è—é —Ç–µ–∫—É—â—É—é —Ñ—É–Ω–∫—Ü–∏—é...');
      
      // –ù–∞–π–¥–µ–º –∞–≤—Ç–æ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      const { data: author, error: authorError } = await supabase
        .from('users')
        .select('id, email, role')
        .eq('email', 'test-author-fixed@example.com')
        .single();
        
      if (authorError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–≤—Ç–æ—Ä–∞:', authorError.message);
        return;
      }
      
      console.log(`üë§ –ù–∞–π–¥–µ–Ω –∞–≤—Ç–æ—Ä: ${author.email} (—Ä–æ–ª—å: ${author.role})`);
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
      const { data: currentResult, error: currentError } = await supabase.rpc('get_dashboard_summary', {
        user_id: author.id
      });
      
      if (currentError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ–∫—É—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏:', currentError.message);
      } else {
        console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ–∫—É—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏:');
        console.log(`   –†–æ–ª—å –≤ –æ—Ç–≤–µ—Ç–µ: ${currentResult?.role}`);
        console.log(`   –û–∂–∏–¥–∞–µ–º–∞—è —Ä–æ–ª—å: ${author.role}`);
        console.log(`   –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏: ${currentResult?.role === author.role ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}`);
        
        if (currentResult?.role === author.role) {
          console.log('\nüéâ –û–¢–õ–ò–ß–ù–û! –§—É–Ω–∫—Ü–∏—è —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ!');
          console.log('‚úÖ –ê–≤—Ç–æ—Ä —Ç–µ–ø–µ—Ä—å —É–≤–∏–¥–∏—Ç "–ü–∞–Ω–µ–ª—å –ê–≤—Ç–æ—Ä–∞"');
          console.log('\nüéØ –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:');
          console.log(`   Email: ${author.email}`);
          console.log(`   Password: TestPassword123!`);
        } else {
          console.log('\n‚ùå –§—É–Ω–∫—Ü–∏—è –≤—Å–µ –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ');
          console.log('üìã –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å SQL —Å–∫—Ä–∏–ø—Ç –≤—Ä—É—á–Ω—É—é –≤ Supabase Dashboard');
        }
      }
      
      return;
    }
    
    console.log('‚úÖ –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    
  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error);
    
    // –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –ø—Ä–æ–≤–µ—Ä–∏–º, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ —Ñ—É–Ω–∫—Ü–∏—è
    console.log('\nüîç –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏...');
    
    try {
      const { data: author, error: authorError } = await supabase
        .from('users')
        .select('id, email, role')
        .eq('email', 'test-author-fixed@example.com')
        .single();
        
      if (!authorError && author) {
        const { data: testResult, error: testError } = await supabase.rpc('get_dashboard_summary', {
          user_id: author.id
        });
        
        if (!testError && testResult) {
          console.log(`üìä –†–æ–ª—å –≤ –æ—Ç–≤–µ—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏: ${testResult?.role}`);
          console.log(`üìä –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${author.role}`);
          
          if (testResult?.role === author.role) {
            console.log('üéâ –§–£–ù–ö–¶–ò–Ø –†–ê–ë–û–¢–ê–ï–¢ –ü–†–ê–í–ò–õ–¨–ù–û!');
          } else {
            console.log('‚ùå –§—É–Ω–∫—Ü–∏—è –≤—Å–µ –µ—â–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ä–æ–ª—å');
          }
        }
      }
    } catch (finalError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏:', finalError);
    }
  }
}

createUpdateFunction(); 