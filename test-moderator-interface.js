require('dotenv').config();
const { createClient } = require('@supabase/supabase-js');

async function testModeratorInterface() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞...');
  
  const supabase = createClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
  );
  
  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    console.log('üìã –®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞');
    const { data: moderators, error: modError } = await supabase
      .from('users')
      .select('id, email, role')
      .eq('role', 'moderator')
      .limit(1);
    
    if (modError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤:', modError.message);
      return;
    }
    
    if (!moderators || moderators.length === 0) {
      console.log('‚ùå –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return;
    }
    
    const moderator = moderators[0];
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä: ${moderator.email} (ID: ${moderator.id})`);
    
    // 2. –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–æ—á–Ω–æ —Ç–∞–∫–æ–π –∂–µ –∑–∞–ø—Ä–æ—Å –∫–∞–∫ –≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
    console.log('\nüìã –®–∞–≥ 2: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫–∞–∫ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ');
    console.log('üîç Fetching books for role: moderator, User ID:', moderator.id);
    
    let query = supabase
      .from('books')
      .select(`
        id,
        base_url,
        title,
        description,
        grade_level,
        course,
        category,
        status,
        author_id,
        moderator_id,
        created_at,
        updated_at,
        price,
        cover_image,
        file_size,
        pages_count,
        language,
        isbn,
        publisher,
        publication_date,
        downloads_count
      `);
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    query = query.eq('status', 'Moderation');
    console.log('üë®‚Äçüíº Moderator filter applied: status = Moderation');
    
    console.log('üöÄ Executing query...');
    const { data: booksData, error: booksError } = await query.order('created_at', { ascending: false });
    
    if (booksError) {
      console.error('‚ùå Database error:', booksError);
      console.error('üìä Error details:', JSON.stringify(booksError, null, 2));
      return;
    }
    
    console.log('‚úÖ Books fetched successfully:', booksData?.length || 0, 'books');
    
    // 3. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–æ–≤ –æ—Ç–¥–µ–ª—å–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
    console.log('\nüìã –®–∞–≥ 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–æ–≤');
    let authorsData = [];
    if (booksData && booksData.length > 0) {
      const authorIds = [...new Set(booksData.map(book => book.author_id).filter(Boolean))];
      if (authorIds.length > 0) {
        console.log('üë• Fetching authors data for', authorIds.length, 'authors');
        const { data: authors, error: authorsError } = await supabase
          .from('users')
          .select('id, display_name, email')
          .in('id', authorIds);
        
        if (!authorsError && authors) {
          authorsData = authors;
          console.log('‚úÖ Authors data fetched:', authorsData.length, 'authors');
        } else {
          console.warn('‚ö†Ô∏è Could not fetch authors data:', authorsError?.message);
        }
      }
    }
    
    // 4. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
    console.log('\nüìã –®–∞–≥ 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö');
    const formattedBooks = (booksData || []).map(book => {
      const authorData = authorsData.find(author => author.id === book.author_id);
      return {
        id: book.id,
        base_url: book.base_url,
        title: book.title,
        description: book.description,
        grade_level: book.grade_level,
        course: book.course,
        category: book.category,
        status: book.status,
        author_id: book.author_id,
        author_name: authorData?.display_name || authorData?.email || 'Unknown Author',
        created_at: book.created_at,
        updated_at: book.updated_at,
        price: book.price,
        cover_image: book.cover_image,
        schools_purchased: 0,
        schools_added: 0,
        teachers_added: 0,
        students_added: 0,
      };
    });
    
    console.log('üìä Formatted books:', formattedBooks.length);
    console.log('üìä Status breakdown:', {
      draft: formattedBooks.filter(b => b.status === 'Draft').length,
      moderation: formattedBooks.filter(b => b.status === 'Moderation').length,
      approved: formattedBooks.filter(b => b.status === 'Approved').length,
      active: formattedBooks.filter(b => b.status === 'Active').length,
    });
    
    // 5. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∫–∞–∂–¥–æ–π –∫–Ω–∏–≥–∏
    console.log('\nüìã –®–∞–≥ 5: –î–µ—Ç–∞–ª–∏ –∫–Ω–∏–≥ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏');
    formattedBooks.forEach((book, index) => {
      console.log(`   ${index + 1}. "${book.title}"`);
      console.log(`      - ID: ${book.id}`);
      console.log(`      - –°—Ç–∞—Ç—É—Å: ${book.status}`);
      console.log(`      - –ê–≤—Ç–æ—Ä: ${book.author_name || book.author_id}`);
      console.log(`      - –¶–µ–Ω–∞: ${book.price ? '‚Ç∏' + book.price : '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ'}`);
      console.log(`      - –°–æ–∑–¥–∞–Ω–∞: ${new Date(book.created_at).toLocaleDateString('ru-RU')}`);
      console.log('');
    });
    
    // 6. –ó–∞–∫–ª—é—á–µ–Ω–∏–µ
    console.log('üéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:');
    if (formattedBooks.length > 0) {
      console.log('‚úÖ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –≤–∏–¥–∏—Ç –∫–Ω–∏–≥–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏!');
      console.log(`üìä –í—Å–µ–≥–æ –∫–Ω–∏–≥: ${formattedBooks.length}`);
      console.log('üí° –ö–Ω–∏–≥–∏ –¥–æ–ª–∂–Ω—ã –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ');
      console.log('üåê –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–π–¥–∏—Ç–µ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:3000');
      console.log('üë§ –í–æ–π–¥–∏—Ç–µ –∫–∞–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä: ' + moderator.email);
      console.log('üìö –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª –ö–Ω–∏–≥–∏');
    } else {
      console.log('‚ö†Ô∏è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –Ω–µ –≤–∏–¥–∏—Ç –∫–Ω–∏–≥ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏');
      console.log('üîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
      console.log('   1. –ù–µ—Ç –∫–Ω–∏–≥ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "Moderation"');
      console.log('   2. –ü—Ä–æ–±–ª–µ–º–∞ —Å RLS –ø–æ–ª–∏—Ç–∏–∫–∞–º–∏');
      console.log('   3. –û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error instanceof Error ? error.message : String(error));
  }
}

testModeratorInterface(); 