require('dotenv').config();
const { createClient } = require('@supabase/supabase-js');

// JavaScript –≤–µ—Ä—Å–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ utils/supabase-admin.ts
const createAdminClient = () => {
  return createClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL,
    process.env.NEXT_PUBLIC_SERVICE_ROLE_KEY
  );
};

const shouldUseAdminClient = (role) => role === 'moderator';

const fetchBooksWithCorrectClient = async (role, userId, fallbackClient) => {
  const useAdmin = shouldUseAdminClient(role);
  const client = useAdmin ? createAdminClient() : fallbackClient;
  
  console.log(`üîë Using ${useAdmin ? 'ADMIN' : 'REGULAR'} client for role: ${role}`);
  
  let query = client
    .from('books')
    .select('id, title, status, author_id');

  // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
  switch (role) {
    case 'author':
      query = query.eq('author_id', userId);
      console.log('‚úçÔ∏è Author filter applied: author_id =', userId);
      break;
    case 'moderator':
      query = query.eq('status', 'Moderation');
      console.log('üë®‚Äçüíº Moderator filter applied: status = Moderation');
      break;
    case 'school':
    case 'teacher':
    case 'student':
      query = query.eq('status', 'Active');
      console.log('üéì User filter applied: status = Active');
      break;
    case 'super_admin':
      console.log('üëë Super admin: no filters applied');
      break;
    default:
      query = query.eq('status', 'Active');
      console.log('üîì Default filter applied: status = Active');
      break;
  }

  const result = await query.order('created_at', { ascending: false });
  console.log(`üìä Query result: ${result.data?.length || 0} books found${result.error ? ` (Error: ${result.error.message})` : ''}`);
  
  return result;
};

async function testAllRoles() {
  console.log('üß™ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –≤—Å–µ—Ö —Ä–æ–ª–µ–π\n');
  
  try {
    const supabase = createClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL,
      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
    );
    
    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∞–≤—Ç–æ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const { data: author } = await createAdminClient()
      .from('users')
      .select('id, email')
      .eq('role', 'author')
      .limit(1)
      .single();
    
    const testCases = [
      {
        role: 'moderator',
        userId: 'c0c8bf1b-c5b5-4f1d-80a3-c20ac3a3fefe',
        description: '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä (–¥–æ–ª–∂–µ–Ω –≤–∏–¥–µ—Ç—å –∫–Ω–∏–≥–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ ADMIN –∫–ª–∏–µ–Ω—Ç)',
        expectedClient: 'ADMIN'
      },
      {
        role: 'author',
        userId: author?.id,
        description: '–ê–≤—Ç–æ—Ä (–¥–æ–ª–∂–µ–Ω –≤–∏–¥–µ—Ç—å —Å–≤–æ–∏ –∫–Ω–∏–≥–∏ —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—ã–π –∫–ª–∏–µ–Ω—Ç)',
        expectedClient: 'REGULAR'
      },
      {
        role: 'super_admin',
        userId: 'test-admin-id',
        description: '–°—É–ø–µ—Ä –∞–¥–º–∏–Ω (–¥–æ–ª–∂–µ–Ω –≤–∏–¥–µ—Ç—å –≤—Å–µ –∫–Ω–∏–≥–∏ —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—ã–π –∫–ª–∏–µ–Ω—Ç)',
        expectedClient: 'REGULAR'
      },
      {
        role: 'teacher',
        userId: 'test-teacher-id',
        description: '–£—á–∏—Ç–µ–ª—å (–¥–æ–ª–∂–µ–Ω –≤–∏–¥–µ—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–∏–≥–∏ —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—ã–π –∫–ª–∏–µ–Ω—Ç)',
        expectedClient: 'REGULAR'
      },
      {
        role: 'student',
        userId: 'test-student-id',
        description: '–°—Ç—É–¥–µ–Ω—Ç (–¥–æ–ª–∂–µ–Ω –≤–∏–¥–µ—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–∏–≥–∏ —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—ã–π –∫–ª–∏–µ–Ω—Ç)',
        expectedClient: 'REGULAR'
      }
    ];
    
    for (let i = 0; i < testCases.length; i++) {
      const testCase = testCases[i];
      console.log(`üìã –¢–µ—Å—Ç ${i + 1}: ${testCase.description}`);
      
      const { data: booksData, error: booksError } = await fetchBooksWithCorrectClient(
        testCase.role,
        testCase.userId,
        supabase
      );
      
      if (booksError) {
        console.log(`‚ùå –û—à–∏–±–∫–∞: ${booksError.message}`);
      } else {
        console.log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: ${booksData?.length || 0} –∫–Ω–∏–≥ –Ω–∞–π–¥–µ–Ω–æ`);
        
        // –û—Å–æ–±–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        if (testCase.role === 'moderator' && booksData && booksData.length > 0) {
          console.log(`üéØ –£–°–ü–ï–•: –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –≤–∏–¥–∏—Ç ${booksData.length} –∫–Ω–∏–≥ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏!`);
          console.log('üìö –ü—Ä–∏–º–µ—Ä—ã –∫–Ω–∏–≥ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏:');
          booksData.slice(0, 3).forEach((book, index) => {
            console.log(`   ${index + 1}. "${book.title}" (—Å—Ç–∞—Ç—É—Å: ${book.status})`);
          });
        }
      }
      console.log('');
    }
    
    console.log('üéâ –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:');
    console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
    console.log('‚úÖ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç ADMIN –∫–ª–∏–µ–Ω—Ç –∏ –≤–∏–¥—è—Ç –∫–Ω–∏–≥–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏');
    console.log('‚úÖ –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–æ–ª–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –æ–±—ã—á–Ω—ã–π –∫–ª–∏–µ–Ω—Ç —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏');
    console.log('‚úÖ RLS –ø—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º SERVICE_ROLE –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤');
    
  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error.message);
  }
}

testAllRoles(); 