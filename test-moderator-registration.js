const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

async function testModeratorRegistration() {
  const testKey = '3pnqso1xqxm57mijegi8b3'; // –ü–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –∫–ª—é—á –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
  console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ —Å –∫–ª—é—á–æ–º:', testKey);
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º service role key –¥–ª—è –ø–æ–ª–Ω—ã—Ö –ø—Ä–∞–≤
  const supabase = createClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL,
    process.env.NEXT_PUBLIC_SERVICE_ROLE_KEY
  );
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á
    console.log('\nüìã –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–∞');
    const { data: key, error: keyError } = await supabase
      .from('registration_keys')
      .select('*')
      .eq('key', testKey)
      .single();
    
    if (keyError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–∞:', keyError.message);
      return;
    }
    
    console.log('   –†–æ–ª—å:', key.role);
    console.log('   –°—Ç–∞—Ç—É—Å:', key.is_active ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω');
    console.log('   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π:', key.uses + '/' + key.max_uses);
    console.log('   –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:', key.expires_at ? new Date(key.expires_at).toLocaleDateString('ru-RU') : '–ë–µ–∑ —Å—Ä–æ–∫–∞');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–∫–∞–∫ –≤ registration-helper.ts)
    const now = new Date();
    const isExpired = key.expires_at && new Date(key.expires_at) < now;
    const isExhausted = key.uses >= key.max_uses;
    
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏:');
    console.log('   –ö–ª—é—á –∞–∫—Ç–∏–≤–µ–Ω:', key.is_active ? '‚úÖ' : '‚ùå');
    console.log('   –ù–µ –∏—Å—Ç–µ–∫:', !isExpired ? '‚úÖ' : '‚ùå');
    console.log('   –ï—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:', !isExhausted ? '‚úÖ' : '‚ùå');
    
    if (!key.is_active || isExpired || isExhausted) {
      console.log('\n‚ùå –ö–ª—é—á –Ω–µ–≤–∞–ª–∏–¥–µ–Ω');
      return;
    }
    
    console.log('\n‚úÖ –ö–ª—é—á –≤–∞–ª–∏–¥–µ–Ω!');
    
    // 2. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Auth
    console.log('\nüìã –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Auth');
    const testEmail = `test-moderator-${Date.now()}@example.com`;
    const testPassword = 'TestPassword123';
    
    const { data: authUser, error: signUpError } = await supabase.auth.admin.createUser({
      email: testEmail,
      password: testPassword,
      email_confirm: true
    });
    
    if (signUpError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Auth:', signUpError.message);
      return;
    }
    
    console.log('   User ID:', authUser.user.id);
    console.log('   Email:', authUser.user.email);
    
    // 3. –†–µ–∞–ª–∏–∑—É–µ–º –ª–æ–≥–∏–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–ø—Ä—è–º—É—é (–∫–∞–∫ –≤ registration-helper.ts)
    console.log('\nüìã –®–∞–≥ 3: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ç–∞–±–ª–∏—Ü–µ users
    const { data: existingUser, error: userCheckError } = await supabase
      .from('users')
      .select('*')
      .eq('id', authUser.user.id)
      .single();

    console.log('   –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { existingUser: !!existingUser, userCheckError: userCheckError?.message });

    let userOperation = 'insert';

    if (existingUser) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª–Ω–æ—Å—Ç—å—é –ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      if (existingUser.email && existingUser.display_name) {
        console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
        return;
      }
      
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –Ω–µ–ø–æ–ª–Ω—ã–π, –æ–±–Ω–æ–≤–ª—è–µ–º
      userOperation = 'update';
      console.log('   –û–±–Ω–æ–≤–ª—è–µ–º –Ω–µ–ø–æ–ª–Ω—É—é –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
      
      const { error: updateError } = await supabase
        .from('users')
        .update({
          email: authUser.user.email,
          role: key.role,
          display_name: '–¢–µ—Å—Ç–æ–≤—ã–π –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä',
          school_id: key.school_id,
          teacher_id: key.teacher_id
        })
        .eq('id', authUser.user.id);

      if (updateError) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', updateError.message);
        return;
      }
    } else {
      // –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      console.log('   –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
      
      const { error: insertError } = await supabase
        .from('users')
        .insert({
          id: authUser.user.id,
          email: authUser.user.email,
          role: key.role,
          display_name: '–¢–µ—Å—Ç–æ–≤—ã–π –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä',
          school_id: key.school_id,
          teacher_id: key.teacher_id,
          created_at: new Date().toISOString()
        });

      if (insertError) {
        console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', insertError.message);
        return;
      }
    }

    // 4. –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–∞
    console.log('\nüìã –®–∞–≥ 4: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞');
    const { error: updateKeyError } = await supabase
      .from('registration_keys')
      .update({ uses: key.uses + 1 })
      .eq('key', testKey);

    if (updateKeyError) {
      console.log('‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª—é—á–∞:', updateKeyError.message);
    } else {
      console.log('   –ö–ª—é—á –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    }

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\nüìã –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞');
    
    const { data: userRecord } = await supabase
      .from('users')
      .select('*')
      .eq('id', authUser.user.id)
      .single();
    
    console.log('   –ó–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î:');
    console.log('     ID:', userRecord.id);
    console.log('     Email:', userRecord.email);
    console.log('     –†–æ–ª—å:', userRecord.role);
    console.log('     –ò–º—è:', userRecord.display_name);
    
    const { data: updatedKey } = await supabase
      .from('registration_keys')
      .select('*')
      .eq('key', testKey)
      .single();
    
    console.log('   –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–ª—é—á:');
    console.log('     –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π:', updatedKey.uses + '/' + updatedKey.max_uses);
    
    console.log('\nüéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    console.log('\nüìù –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:');
    console.log('   Email:', testEmail);
    console.log('   Password:', testPassword);
    console.log('   Role:', userRecord.role);
    console.log('\nüìã URL –¥–ª—è –≤—Ö–æ–¥–∞: http://localhost:3000/login');
    
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞:', error.message);
  }
}

testModeratorRegistration(); 