const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.NEXT_PUBLIC_SERVICE_ROLE_KEY
);

async function createNewModeratorKey() {
  try {
    const newKey = 'MOD-' + Math.random().toString(36).substring(2, 10).toUpperCase();
    
    const { data, error } = await supabase
      .from('registration_keys')
      .insert({
        key: newKey,
        role: 'moderator',
        is_active: true,
        max_uses: 1,
        uses: 0,
        expires_at: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(), // 30 –¥–Ω–µ–π
        created_by: null
      })
      .select()
      .single();
    
    if (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞:', error.message);
      return;
    }
    
    console.log('‚úÖ –ù–æ–≤—ã–π –∫–ª—é—á –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ —Å–æ–∑–¥–∞–Ω!');
    console.log('üìã –î–µ—Ç–∞–ª–∏:');
    console.log('   –ö–ª—é—á:', data.key);
    console.log('   –†–æ–ª—å:', data.role);
    console.log('   –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:', new Date(data.expires_at).toLocaleDateString('ru-RU'));
    console.log('');
    console.log('üîó URL –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:');
    console.log('   http://localhost:3000/register?key=' + data.key);
    console.log('');
    console.log('üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞:');
    console.log('   1. –û—Ç–∫—Ä–æ–π—Ç–µ —ç—Ç–æ—Ç URL –≤ –±—Ä–∞—É–∑–µ—Ä–µ');
    console.log('   2. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:');
    console.log('      - Email: –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π email');
    console.log('      - Password: –ø—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å');
    console.log('      - –ü–æ–ª–Ω–æ–µ –∏–º—è: –≤–∞—à–µ –∏–º—è');
    console.log('   3. –ù–∞–∂–º–∏—Ç–µ "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"');
    console.log('   4. –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É');
    console.log('   5. –í—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ "Moderator Dashboard"');
    
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞:', error);
  }
}

createNewModeratorKey(); 