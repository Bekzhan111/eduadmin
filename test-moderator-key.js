const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

async function testModeratorRegistration() {
  const testKey = '3pnqso1xqxm57mijegi8b3'; // –ü–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –∫–ª—é—á –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
  console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª—é—á –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞:', testKey);
  
  const supabase = createClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
  );
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á
    const { data: key, error: keyError } = await supabase
      .from('registration_keys')
      .select('*')
      .eq('key', testKey)
      .single();
    
    if (keyError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–∞:', keyError.message);
      return;
    }
    
    console.log('üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª—é—á–µ:');
    console.log('   ID:', key.id);
    console.log('   –†–æ–ª—å:', key.role);
    console.log('   –°—Ç–∞—Ç—É—Å:', key.is_active ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω');
    console.log('   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π:', key.used_count + '/' + key.max_uses);
    console.log('   –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:', key.expires_at || '–ë–µ–∑ —Å—Ä–æ–∫–∞');
    console.log('   –°–æ–∑–¥–∞–Ω:', new Date(key.created_at).toLocaleString('ru-RU'));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    const now = new Date();
    const isExpired = key.expires_at && new Date(key.expires_at) < now;
    const isExhausted = key.used_count >= key.max_uses;
    
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏:');
    console.log('   –ö–ª—é—á –∞–∫—Ç–∏–≤–µ–Ω:', key.is_active ? '‚úÖ' : '‚ùå');
    console.log('   –ù–µ –∏—Å—Ç–µ–∫:', !isExpired ? '‚úÖ' : '‚ùå');
    console.log('   –ï—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:', !isExhausted ? '‚úÖ' : '‚ùå');
    
    if (key.is_active && !isExpired && !isExhausted) {
      console.log('\n‚úÖ –ö–ª—é—á –≤–∞–ª–∏–¥–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!');
      console.log('üìù URL –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: http://localhost:3000/register?key=' + testKey);
    } else {
      console.log('\n‚ùå –ö–ª—é—á –Ω–µ–≤–∞–ª–∏–¥–µ–Ω');
    }
    
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞:', error.message);
  }
}

testModeratorRegistration(); 