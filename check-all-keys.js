const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.NEXT_PUBLIC_SERVICE_ROLE_KEY
);

const ALL_ROLES = ['super_admin', 'school', 'teacher', 'student', 'author', 'moderator'];

console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫–ª—é—á–µ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n');

async function checkAllKeys() {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏
    const { data: keys, error } = await supabase
      .from('registration_keys')
      .select('*')
      .order('role, created_at');

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–µ–π:', error.message);
      return;
    }

    console.log(`üìä –í—Å–µ–≥–æ –∫–ª—é—á–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ: ${keys?.length || 0}\n`);

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ä–æ–ª—è–º
    const keysByRole = {};
    ALL_ROLES.forEach(role => {
      keysByRole[role] = keys?.filter(key => key.role === role) || [];
    });

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Ä–æ–ª—å
    console.log('üìã –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ —Ä–æ–ª—è–º:\n');
    
    for (const role of ALL_ROLES) {
      const roleKeys = keysByRole[role];
      console.log(`üîë ${role.toUpperCase()}:`);
      
      if (roleKeys.length === 0) {
        console.log('  ‚ùå –ö–ª—é—á–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
        continue;
      }

      const activeKeys = roleKeys.filter(key => key.is_active);
      const availableKeys = roleKeys.filter(key => 
        key.is_active && 
        key.uses < key.max_uses &&
        (!key.expires_at || new Date(key.expires_at) > new Date())
      );
      const expiredKeys = roleKeys.filter(key => 
        key.expires_at && new Date(key.expires_at) <= new Date()
      );
      const exhaustedKeys = roleKeys.filter(key => key.uses >= key.max_uses);

      console.log(`  üìä –í—Å–µ–≥–æ: ${roleKeys.length}`);
      console.log(`  ‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${activeKeys.length}`);
      console.log(`  üü¢ –î–æ—Å—Ç—É–ø–Ω—ã—Ö: ${availableKeys.length}`);
      console.log(`  ‚è∞ –ò—Å—Ç–µ–∫—à–∏—Ö: ${expiredKeys.length}`);
      console.log(`  üî¥ –ò—Å—á–µ—Ä–ø–∞–Ω–Ω—ã—Ö: ${exhaustedKeys.length}`);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª—é—á–µ–π
      if (availableKeys.length > 0) {
        console.log('  üìù –ü—Ä–∏–º–µ—Ä—ã –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª—é—á–µ–π:');
        availableKeys.slice(0, 3).forEach((key, index) => {
          const expiresDate = key.expires_at ? new Date(key.expires_at).toLocaleDateString() : '–ë–µ–∑ —Å—Ä–æ–∫–∞';
          console.log(`    ${index + 1}. ${key.key} (${key.uses}/${key.max_uses} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π, –¥–æ ${expiresDate})`);
        });
        if (availableKeys.length > 3) {
          console.log(`    ... –∏ –µ—â–µ ${availableKeys.length - 3} –∫–ª—é—á–µ–π`);
        }
      }
      console.log('');
    }

    // –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
    console.log('üìä –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞:');
    console.log('‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê');
    console.log('‚îÇ –†–æ–ª—å        ‚îÇ –í—Å–µ–≥–æ ‚îÇ –ê–∫—Ç–∏–≤–Ω—ã—Ö‚îÇ –î–æ—Å—Ç—É–ø–Ω—ã—Ö ‚îÇ –ò—Å—Ç–µ–∫—à–∏—Ö‚îÇ –ò—Å—á–µ—Ä–ø–∞–Ω–Ω—ã—Ö‚îÇ');
    console.log('‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§');
    
    for (const role of ALL_ROLES) {
      const roleKeys = keysByRole[role];
      const activeKeys = roleKeys.filter(key => key.is_active);
      const availableKeys = roleKeys.filter(key => 
        key.is_active && 
        key.uses < key.max_uses &&
        (!key.expires_at || new Date(key.expires_at) > new Date())
      );
      const expiredKeys = roleKeys.filter(key => 
        key.expires_at && new Date(key.expires_at) <= new Date()
      );
      const exhaustedKeys = roleKeys.filter(key => key.uses >= key.max_uses);

      const roleName = role.padEnd(11);
      const total = roleKeys.length.toString().padStart(5);
      const active = activeKeys.length.toString().padStart(7);
      const available = availableKeys.length.toString().padStart(9);
      const expired = expiredKeys.length.toString().padStart(7);
      const exhausted = exhaustedKeys.length.toString().padStart(10);

      console.log(`‚îÇ ${roleName} ‚îÇ ${total} ‚îÇ ${active} ‚îÇ ${available} ‚îÇ ${expired} ‚îÇ ${exhausted} ‚îÇ`);
    }
    console.log('‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã
    console.log('\nüö® –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º:');
    const problems = [];
    
    for (const role of ALL_ROLES) {
      const roleKeys = keysByRole[role];
      const availableKeys = roleKeys.filter(key => 
        key.is_active && 
        key.uses < key.max_uses &&
        (!key.expires_at || new Date(key.expires_at) > new Date())
      );
      
      if (availableKeys.length === 0) {
        problems.push(`‚ùå ${role}: –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª—é—á–µ–π`);
      } else if (availableKeys.length < 3) {
        problems.push(`‚ö†Ô∏è ${role}: –ú–∞–ª–æ –∫–ª—é—á–µ–π (${availableKeys.length})`);
      }
    }

    if (problems.length === 0) {
      console.log('‚úÖ –ü—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ! –í—Å–µ —Ä–æ–ª–∏ –∏–º–µ—é—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–ª—é—á–µ–π.');
    } else {
      problems.forEach(problem => console.log(`  ${problem}`));
    }

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
    console.log('1. –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: http://localhost:3000/register?key=–ö–õ–Æ–ß');
    console.log('2. –ö–ª—é—á–∏ super_admin —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ —á–µ—Ä–µ–∑ SQL (fix-super-admin-keys.sql)');
    console.log('3. –†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–ª—é—á–µ–π');
    console.log('4. –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –Ω–æ–≤—ã–µ –∫–ª—é—á–∏ –∑–∞—Ä–∞–Ω–µ–µ, –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–ª—é—á–µ–π:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
checkAllKeys(); 