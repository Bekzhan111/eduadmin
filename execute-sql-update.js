const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.NEXT_PUBLIC_SERVICE_ROLE_KEY
);

async function executeSQLUpdate() {
  console.log('üîß –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ get_dashboard_summary\n');
  
  try {
    // SQL —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
    const sqlScript = `
-- Update dashboard summary function to include all necessary data
DROP FUNCTION IF EXISTS public.get_dashboard_summary(uuid);

CREATE OR REPLACE FUNCTION public.get_dashboard_summary(user_id UUID)
RETURNS JSON AS $$
DECLARE
    user_record RECORD;
    result JSON;
    school_stats RECORD;
    key_stats RECORD;
    book_stats RECORD;
BEGIN
    -- –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    SELECT u.role, u.school_id, s.name as school_name
    INTO user_record
    FROM users u
    LEFT JOIN schools s ON u.school_id = s.id
    WHERE u.id = user_id;

    -- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
    IF user_record IS NULL THEN
        RETURN json_build_object('error', 'User not found');
    END IF;

    -- –ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å –ü–†–ê–í–ò–õ–¨–ù–û–ô —Ä–æ–ª—å—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    result := json_build_object(
        'role', user_record.role,  -- –í–ê–ñ–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–æ–ª—å –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users
        'school_id', user_record.school_id,
        'school_name', user_record.school_name
    );

    -- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
    CASE user_record.role
        WHEN 'super_admin' THEN
            -- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            SELECT 
                COUNT(DISTINCT s.id) as school_count,
                COUNT(DISTINCT u.id) as user_count,
                COUNT(DISTINCT CASE WHEN u.role = 'teacher' THEN u.id END) as teacher_count,
                COUNT(DISTINCT CASE WHEN u.role = 'student' THEN u.id END) as student_count
            INTO school_stats
            FROM schools s
            LEFT JOIN users u ON s.id = u.school_id;

            -- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª—é—á–µ–π –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            SELECT 
                COUNT(CASE WHEN role = 'school' AND is_active = true AND uses < max_uses THEN 1 END) as school_keys,
                COUNT(CASE WHEN role = 'teacher' AND is_active = true AND uses < max_uses THEN 1 END) as teacher_keys,
                COUNT(CASE WHEN role = 'student' AND is_active = true AND uses < max_uses THEN 1 END) as student_keys,
                COUNT(CASE WHEN role = 'author' AND is_active = true AND uses < max_uses THEN 1 END) as author_keys,
                COUNT(CASE WHEN role = 'moderator' AND is_active = true AND uses < max_uses THEN 1 END) as moderator_keys
            INTO key_stats
            FROM registration_keys;

            result := result || json_build_object(
                'school_count', COALESCE(school_stats.school_count, 0),
                'user_count', COALESCE(school_stats.user_count, 0),
                'teacher_count', COALESCE(school_stats.teacher_count, 0),
                'student_count', COALESCE(school_stats.student_count, 0),
                'key_stats', json_build_object(
                    'school_keys', COALESCE(key_stats.school_keys, 0),
                    'teacher_keys', COALESCE(key_stats.teacher_keys, 0),
                    'student_keys', COALESCE(key_stats.student_keys, 0),
                    'author_keys', COALESCE(key_stats.author_keys, 0),
                    'moderator_keys', COALESCE(key_stats.moderator_keys, 0)
                )
            );

        WHEN 'school' THEN
            -- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —à–∫–æ–ª—ã
            SELECT 
                COUNT(DISTINCT CASE WHEN u.role = 'teacher' THEN u.id END) as teacher_count,
                COUNT(DISTINCT CASE WHEN u.role = 'student' THEN u.id END) as student_count,
                s.student_quota
            INTO school_stats
            FROM schools s
            LEFT JOIN users u ON s.id = u.school_id
            WHERE s.id = user_record.school_id
            GROUP BY s.student_quota;

            -- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª—é—á–µ–π –¥–ª—è —à–∫–æ–ª—ã
            SELECT 
                COUNT(CASE WHEN role = 'teacher' AND is_active = true AND uses < max_uses THEN 1 END) as teacher_keys,
                COUNT(CASE WHEN role = 'student' AND is_active = true AND uses < max_uses AND (school_id = user_record.school_id OR school_id IS NULL) THEN 1 END) as student_keys,
                COUNT(CASE WHEN role = 'student' AND is_active = true AND uses < max_uses AND school_id = user_record.school_id THEN 1 END) as assigned_keys,
                COUNT(CASE WHEN role = 'student' AND is_active = true AND uses < max_uses AND school_id IS NULL THEN 1 END) as unassigned_student_keys
            INTO key_stats
            FROM registration_keys
            WHERE created_by = user_id OR role IN ('teacher', 'student');

            result := result || json_build_object(
                'teacher_count', COALESCE(school_stats.teacher_count, 0),
                'student_count', COALESCE(school_stats.student_count, 0),
                'student_quota', COALESCE(school_stats.student_quota, 0),
                'key_stats', json_build_object(
                    'teacher_keys', COALESCE(key_stats.teacher_keys, 0),
                    'student_keys', COALESCE(key_stats.student_keys, 0),
                    'assigned_keys', COALESCE(key_stats.assigned_keys, 0),
                    'unassigned_student_keys', COALESCE(key_stats.unassigned_student_keys, 0)
                )
            );

        WHEN 'teacher' THEN
            -- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —É—á–∏—Ç–µ–ª—è
            SELECT 
                COUNT(DISTINCT CASE WHEN u.role = 'student' THEN u.id END) as student_count
            INTO school_stats
            FROM users u
            WHERE u.school_id = user_record.school_id;

            result := result || json_build_object(
                'student_count', COALESCE(school_stats.student_count, 0)
            );

        WHEN 'student' THEN
            -- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞
            SELECT 
                COUNT(DISTINCT CASE WHEN u.role = 'teacher' THEN u.id END) as teacher_count,
                COUNT(DISTINCT CASE WHEN u.role = 'student' THEN u.id END) as student_count
            INTO school_stats
            FROM users u
            WHERE u.school_id = user_record.school_id;

            result := result || json_build_object(
                'teacher_count', COALESCE(school_stats.teacher_count, 0),
                'student_count', COALESCE(school_stats.student_count, 0)
            );

        WHEN 'author' THEN
            -- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            SELECT 
                COUNT(*) as total_books,
                COUNT(CASE WHEN status = 'draft' THEN 1 END) as draft_books,
                COUNT(CASE WHEN status = 'moderation' THEN 1 END) as moderation_books,
                COUNT(CASE WHEN status = 'active' THEN 1 END) as active_books,
                COUNT(CASE WHEN status = 'approved' THEN 1 END) as approved_books
            INTO book_stats
            FROM books
            WHERE author_id = user_id;

            result := result || json_build_object(
                'book_stats', json_build_object(
                    'total_books', COALESCE(book_stats.total_books, 0),
                    'draft_books', COALESCE(book_stats.draft_books, 0),
                    'moderation_books', COALESCE(book_stats.moderation_books, 0),
                    'active_books', COALESCE(book_stats.active_books, 0),
                    'approved_books', COALESCE(book_stats.approved_books, 0)
                )
            );

        WHEN 'moderator' THEN
            -- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
            SELECT 
                COUNT(*) as total_books,
                COUNT(CASE WHEN status = 'moderation' THEN 1 END) as moderation_books,
                COUNT(CASE WHEN status = 'active' THEN 1 END) as active_books,
                COUNT(CASE WHEN status = 'approved' THEN 1 END) as approved_books
            INTO book_stats
            FROM books;

            -- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é
            SELECT COUNT(*) as weekly_reviews
            INTO key_stats
            FROM book_reviews
            WHERE created_at >= NOW() - INTERVAL '7 days';

            result := result || json_build_object(
                'book_stats', json_build_object(
                    'total_books', COALESCE(book_stats.total_books, 0),
                    'moderation_books', COALESCE(book_stats.moderation_books, 0),
                    'active_books', COALESCE(book_stats.active_books, 0),
                    'approved_books', COALESCE(book_stats.approved_books, 0),
                    'weekly_reviews', COALESCE(key_stats.weekly_reviews, 0)
                )
            );

        ELSE
            -- –î–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ä–æ–ª–µ–π
            result := result || json_build_object('message', 'Unknown role');
    END CASE;

    RETURN result;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
GRANT EXECUTE ON FUNCTION get_dashboard_summary(UUID) TO authenticated;
`;

    console.log('üìù –í—ã–ø–æ–ª–Ω—è—é SQL —Å–∫—Ä–∏–ø—Ç...');
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º SQL —Å–∫—Ä–∏–ø—Ç
    const { data, error } = await supabase.rpc('exec', {
      sql: sqlScript
    });

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL:', error.message);
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - —á–µ—Ä–µ–∑ .sql()
      console.log('üîÑ –ü—Ä–æ–±—É—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±...');
      
      const { data: altData, error: altError } = await supabase
        .from('_supabase_sql_execute')
        .insert({ sql: sqlScript });
        
      if (altError) {
        console.error('‚ùå –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:', altError.message);
        console.log('\n‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å SQL —Å–∫—Ä–∏–ø—Ç –≤—Ä—É—á–Ω—É—é –≤ Supabase Dashboard');
        console.log('üìÅ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ñ–∞–π–ª–µ: update-dashboard-function.sql');
        return;
      }
      
      console.log('‚úÖ SQL —Å–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º');
    } else {
      console.log('‚úÖ SQL —Å–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏...');
    
    // –ù–∞—Ö–æ–¥–∏–º –∞–≤—Ç–æ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const { data: author, error: authorError } = await supabase
      .from('users')
      .select('id, email, role')
      .eq('email', 'test-author-fixed@example.com')
      .single();
      
    if (authorError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–≤—Ç–æ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', authorError.message);
      return;
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é
    const { data: testResult, error: testError } = await supabase.rpc('get_dashboard_summary', {
      user_id: author.id
    });
    
    if (testError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏:', testError.message);
    } else {
      console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
      console.log(`   Email –∞–≤—Ç–æ—Ä–∞: ${author.email}`);
      console.log(`   –†–æ–ª—å –≤ —Ç–∞–±–ª–∏—Ü–µ users: ${author.role}`);
      console.log(`   –†–æ–ª—å –≤ –æ—Ç–≤–µ—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏: ${testResult?.role}`);
      console.log(`   –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏: ${testResult?.role === 'author' ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}`);
      
      if (testResult?.role === 'author') {
        console.log('\nüéâ –£–°–ü–ï–•! –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ!');
        console.log('\nüéØ –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –∫–∞–∫ –∞–≤—Ç–æ—Ä:');
        console.log(`   Email: ${author.email}`);
        console.log(`   Password: TestPassword123!`);
        console.log('   –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: "–ü–∞–Ω–µ–ª—å –ê–≤—Ç–æ—Ä–∞"');
      } else {
        console.log('\n‚ùå –§—É–Ω–∫—Ü–∏—è –≤—Å–µ –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ');
      }
    }
    
  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

executeSQLUpdate(); 