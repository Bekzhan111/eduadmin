const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.NEXT_PUBLIC_SERVICE_ROLE_KEY
);

async function checkAuthorRole() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∞–≤—Ç–æ—Ä–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\n');
  
  try {
    // –ò—â–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—å—é author
    const { data: authors, error } = await supabase
      .from('users')
      .select('id, email, role')
      .eq('role', 'author');
      
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–æ–≤:', error.message);
      return;
    }
    
    if (!authors || authors.length === 0) {
      console.log('‚ö†Ô∏è –ê–≤—Ç–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      return;
    }
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∞–≤—Ç–æ—Ä–æ–≤: ${authors.length}\n`);
    
    for (const author of authors) {
      console.log(`üë§ –ê–≤—Ç–æ—Ä: ${author.email}`);
      console.log(`   ID: ${author.id}`);
      console.log(`   –†–æ–ª—å –≤ —Ç–∞–±–ª–∏—Ü–µ users: ${author.role}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é dashboard –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–≤—Ç–æ—Ä–∞
      const { data: dashboardData, error: dashboardError } = await supabase.rpc('get_dashboard_summary', {
        user_id: author.id
      });
      
      if (dashboardError) {
        console.error(`   ‚ùå –û—à–∏–±–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ dashboard: ${dashboardError.message}`);
      } else {
        console.log(`   –†–æ–ª—å –≤ –æ—Ç–≤–µ—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏: ${dashboardData?.role}`);
        console.log(`   –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏: ${dashboardData?.role === 'author' ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}`);
        
        if (dashboardData?.role !== 'author') {
          console.log('   üö® –ü–†–û–ë–õ–ï–ú–ê: –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ä–æ–ª—å!');
        }
      }
      console.log('');
    }
    
    // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å email —Å–æ–¥–µ—Ä–∂–∞—â–∏–º "test-author"
    console.log('üîç –ü–æ–∏—Å–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞–≤—Ç–æ—Ä–æ–≤...\n');
    const { data: testAuthors, error: testError } = await supabase
      .from('users')
      .select('id, email, role')
      .like('email', '%test-author%');
      
    if (testError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞–≤—Ç–æ—Ä–æ–≤:', testError.message);
    } else if (testAuthors && testAuthors.length > 0) {
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${testAuthors.length}\n`);
      
      for (const user of testAuthors) {
        console.log(`üë§ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.email}`);
        console.log(`   ID: ${user.id}`);
        console.log(`   –†–æ–ª—å: ${user.role}`);
        console.log('');
      }
    } else {
      console.log('‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤—ã–µ –∞–≤—Ç–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
    
  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

checkAuthorRole(); 