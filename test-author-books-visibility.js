const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

async function testAuthorBooksVisibility() {
  console.log('üëÅÔ∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–Ω–∏–≥ –∞–≤—Ç–æ—Ä–∞ –≤–æ –≤—Å–µ—Ö —Å—Ç–∞—Ç—É—Å–∞—Ö...');
  
  const supabase = createClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
  );
  
  try {
    // 1. –ù–∞–π–¥–µ–º –∞–≤—Ç–æ—Ä–∞
    console.log('üìã –®–∞–≥ 1: –ü–æ–∏—Å–∫ –∞–≤—Ç–æ—Ä–∞');
    const { data: authors, error: authorsError } = await supabase
      .from('users')
      .select('id, email, role')
      .eq('role', 'author')
      .limit(1);
    
    if (authorsError) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–≤—Ç–æ—Ä–æ–≤: ${authorsError.message}`);
    }
    
    if (!authors || authors.length === 0) {
      console.log('‚ö†Ô∏è –ê–≤—Ç–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return;
    }
    
    const testAuthor = authors[0];
    console.log('‚úÖ –ù–∞–π–¥–µ–Ω –∞–≤—Ç–æ—Ä:', testAuthor.email, 'ID:', testAuthor.id);
    
    // 2. –°–æ–∑–¥–∞–¥–∏–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–Ω–∏–≥–∏ –≤–æ –≤—Å–µ—Ö —Å—Ç–∞—Ç—É—Å–∞—Ö
    console.log('\nüìã –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–Ω–∏–≥ –≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–∞—Ö');
    
    const testStatuses = ['Draft', 'Moderation', 'Approved', 'Active'];
    const createdBooks = [];
    
    for (const status of testStatuses) {
      const testBook = {
        title: `–¢–µ—Å—Ç–æ–≤–∞—è –∫–Ω–∏–≥–∞ –≤ —Å—Ç–∞—Ç—É—Å–µ ${status}`,
        description: `–û–ø–∏—Å–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –≤ —Å—Ç–∞—Ç—É—Å–µ ${status}`,
        grade_level: '7',
        course: '–ë–∏–æ–ª–æ–≥–∏—è',
        category: '–£—á–µ–±–Ω–∏–∫',
        language: '–†—É—Å—Å–∫–∏–π',
        pages_count: 120,
        price: 3000,
        base_url: `test-book-${status.toLowerCase()}-${Date.now()}`,
        author_id: testAuthor.id,
        status: status
      };
      
      const { data: book, error: bookError } = await supabase
        .from('books')
        .insert(testBook)
        .select()
        .single();
      
      if (bookError) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–∏–≥–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º ${status}:`, bookError.message);
      } else {
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–Ω–∏–≥–∞ "${book.title}" —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º ${book.status}`);
        createdBooks.push(book);
      }
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –∞–≤—Ç–æ—Ä –≤–∏–¥–∏—Ç –≤—Å–µ —Å–≤–æ–∏ –∫–Ω–∏–≥–∏
    console.log('\nüìã –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∫–Ω–∏–≥ –∞–≤—Ç–æ—Ä–∞');
    const { data: authorBooks, error: booksError } = await supabase
      .from('books')
      .select('id, title, status, author_id')
      .eq('author_id', testAuthor.id)
      .order('created_at', { ascending: false });
    
    if (booksError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–Ω–∏–≥ –∞–≤—Ç–æ—Ä–∞:', booksError.message);
    } else {
      console.log(`‚úÖ –ê–≤—Ç–æ—Ä –≤–∏–¥–∏—Ç ${authorBooks.length} –∫–Ω–∏–≥:`);
      
      const statusCounts = {};
      authorBooks.forEach(book => {
        statusCounts[book.status] = (statusCounts[book.status] || 0) + 1;
        console.log(`  - ${book.title} (–°—Ç–∞—Ç—É—Å: ${book.status})`);
      });
      
      console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:');
      Object.entries(statusCounts).forEach(([status, count]) => {
        console.log(`  ${status}: ${count} –∫–Ω–∏–≥`);
      });
    }
    
    // 4. –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –≤–∏–¥—è—Ç —Ç–æ–ª—å–∫–æ –∫–Ω–∏–≥–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    console.log('\nüìã –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤');
    const { data: moderationBooks, error: modError } = await supabase
      .from('books')
      .select('id, title, status, author_id')
      .eq('status', 'Moderation');
    
    if (modError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–Ω–∏–≥ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏:', modError.message);
    } else {
      console.log(`‚úÖ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –≤–∏–¥—è—Ç ${moderationBooks.length} –∫–Ω–∏–≥ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏:`);
      moderationBooks.forEach(book => {
        console.log(`  - ${book.title} (–ê–≤—Ç–æ—Ä: ${book.author_id})`);
      });
    }
    
    console.log('\nüí° –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
    console.log('   ‚úÖ –ê–≤—Ç–æ—Ä—ã —Ç–µ–ø–µ—Ä—å –≤–∏–¥—è—Ç –í–°–ï —Å–≤–æ–∏ –∫–Ω–∏–≥–∏ –≤–æ –≤—Å–µ—Ö —Å—Ç–∞—Ç—É—Å–∞—Ö');
    console.log('   ‚úÖ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –≤–∏–¥—è—Ç —Ç–æ–ª—å–∫–æ –∫–Ω–∏–≥–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏');
    console.log('   ‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
  }
}

testAuthorBooksVisibility(); 